<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AnonymousUser" xml:space="preserve">
    <value>Anonymous</value>
  </data>
  <data name="CannotDeleteOrganizationTypeWithOrganizations" xml:space="preserve">
    <value>The organization type {1} cannot be deleted due to {0} associated organizations.</value>
  </data>
  <data name="CodeCannotUpdate" xml:space="preserve">
    <value>Code cannot be updated.</value>
  </data>
  <data name="ConcreteDataNameCannotBeEmpty" xml:space="preserve">
    <value>Concrete data name cannot be empty!</value>
  </data>
  <data name="ConcreteDataObjectCannotBeNull" xml:space="preserve">
    <value>Concrete Data Object cannot be null!</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DisplayNameCannotBeEmpty" xml:space="preserve">
    <value>Display name cannot be empty!</value>
  </data>
  <data name="DuplicateConcreteDataName" xml:space="preserve">
    <value>The name "{0}" of concrete data is duplicated.</value>
  </data>
  <data name="DuplicateDisplayName" xml:space="preserve">
    <value>Display name {0} has existed already!</value>
  </data>
  <data name="DuplicateHierarchyDataName" xml:space="preserve">
    <value>Duplicate hierarchy data name.</value>
  </data>
  <data name="DuplicateHierarchyTypeName" xml:space="preserve">
    <value>Duplicate hierarchy type name.</value>
  </data>
  <data name="DuplicateOrganizationCode" xml:space="preserve">
    <value>Organization code {0} has existed already!</value>
  </data>
  <data name="DuplicateOrganizationName" xml:space="preserve">
    <value>Organization name {0} has existed already!</value>
  </data>
  <data name="DuplicateOrganizationTypeName" xml:space="preserve">
    <value>Organization type name {0} has existed already!</value>
  </data>
  <data name="DuplicateRoleName" xml:space="preserve">
    <value>Role {0} has existed in application. There only allows unique role name across organization domains in an application.</value>
  </data>
  <data name="DuplicateUserName" xml:space="preserve">
    <value>User name {0} has existed already!</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="ExistedAreaCode" xml:space="preserve">
    <value>Area code {0} has been existed.</value>
  </data>
  <data name="ExistedAreaName" xml:space="preserve">
    <value>Area name {0} has been existed.</value>
  </data>
  <data name="ExistedDisplayName" xml:space="preserve">
    <value>Display name has been existed.</value>
  </data>
  <data name="ExistedOrganizationCode" xml:space="preserve">
    <value>Organization code {0} has been existed.</value>
  </data>
  <data name="ExistedOrganizationName" xml:space="preserve">
    <value>Organization name {0} has been existed.</value>
  </data>
  <data name="ExistedOrganizationTypeName" xml:space="preserve">
    <value>The organization type {0} has been existed.</value>
  </data>
  <data name="ExistedRoleName" xml:space="preserve">
    <value>Role {0} has been existed.</value>
  </data>
  <data name="ExistedUserEmail" xml:space="preserve">
    <value>User email has been existed.</value>
  </data>
  <data name="ExistedUserName" xml:space="preserve">
    <value>User name has been exist.</value>
  </data>
  <data name="HasChildArea" xml:space="preserve">
    <value>with children.</value>
  </data>
  <data name="HasNoChildArea" xml:space="preserve">
    <value>without children</value>
  </data>
  <data name="HierarchyDataNameCannotBeEmpty" xml:space="preserve">
    <value>Hierarchy name cannot be empty!</value>
  </data>
  <data name="HierarchyObjectCannotBeNull" xml:space="preserve">
    <value>Hierarchy Data Object cannot be null!</value>
  </data>
  <data name="HierarchyTypeCannotBeChanged" xml:space="preserve">
    <value>The hierarchy type of hierarchy data cannot be changed.</value>
  </data>
  <data name="InvalidApplicationID" xml:space="preserve">
    <value>Invalid application ID {0}.</value>
  </data>
  <data name="InvalidAreaID" xml:space="preserve">
    <value>Invalid area ID.</value>
  </data>
  <data name="InvalidAuthentication" xml:space="preserve">
    <value>The authentication is invalid.</value>
  </data>
  <data name="InvalidConcreteDataID" xml:space="preserve">
    <value>Invalid concrete data id. The concrete data may be deleted by other users before your operation.</value>
  </data>
  <data name="InvalidConcreteDataType" xml:space="preserve">
    <value>The request query string parameter ConcreteDataType "{0}" is invalid.</value>
  </data>
  <data name="InvalidDisplayName" xml:space="preserve">
    <value>Display name should not be empty or greater than 256 characters.</value>
  </data>
  <data name="InvalidDomain" xml:space="preserve">
    <value>The request query string parameter Domain "{0}" is invalid.</value>
  </data>
  <data name="InvalidHierarchyAssociatedWithOrganization" xml:space="preserve">
    <value>Invalid hierarchy "{1}" in type "{0}" associated with the organization.</value>
  </data>
  <data name="InvalidHierarchyDataId" xml:space="preserve">
    <value>Invalid hierarchy data id.</value>
  </data>
  <data name="InvalidHierarchyDataName" xml:space="preserve">
    <value>Invalid Hierarchy Data Name!</value>
  </data>
  <data name="InvalidHierarchyType" xml:space="preserve">
    <value>Invalid hierarchy type "{0}".</value>
  </data>
  <data name="InvalidOldPasswordWhenChangePassword" xml:space="preserve">
    <value>The old password is invalid!</value>
  </data>
  <data name="InvalidOrganizationCredential" xml:space="preserve">
    <value>The organization of the user is invalid.</value>
  </data>
  <data name="InvalidOrganizationDomain" xml:space="preserve">
    <value>Invalid organization domain.</value>
  </data>
  <data name="InvalidOrganizationID" xml:space="preserve">
    <value>Invalid organization ID.</value>
  </data>
  <data name="InvalidOrganizationTypeDomain" xml:space="preserve">
    <value>Invalid domain {0} of organization type.</value>
  </data>
  <data name="InvalidOrganizationTypeID" xml:space="preserve">
    <value>Organization type ID is invalid.</value>
  </data>
  <data name="InvalidParentAreaID" xml:space="preserve">
    <value>Parent area ID is invalid.</value>
  </data>
  <data name="InvalidParentHierarchyDataId" xml:space="preserve">
    <value>Invalid parent hierarchy data id.</value>
  </data>
  <data name="InvalidParentOrganizationID" xml:space="preserve">
    <value>The specified parent organization is invalid.</value>
  </data>
  <data name="InvalidPasswordFormat" xml:space="preserve">
    <value>Password is not allowed format.</value>
  </data>
  <data name="InvalidRoleID" xml:space="preserve">
    <value>Invalid role ID.</value>
  </data>
  <data name="InvalidUserCredential" xml:space="preserve">
    <value>The credential is invalid.</value>
  </data>
  <data name="InvalidUserEmail" xml:space="preserve">
    <value>User email should not be greater than 256 characters.</value>
  </data>
  <data name="InvalidUserID" xml:space="preserve">
    <value>user ID {0} is invalid.</value>
  </data>
  <data name="InvalidUserName" xml:space="preserve">
    <value>User name should not be empty or greater than 256 characters.</value>
  </data>
  <data name="NoParentArea" xml:space="preserve">
    <value>Has no parent</value>
  </data>
  <data name="OrganizationCannotBeEmpty" xml:space="preserve">
    <value>Organization cannot be empty!</value>
  </data>
  <data name="OrganizationCodeCannotBeEmpty" xml:space="preserve">
    <value>Organization code cannot be empty!</value>
  </data>
  <data name="OrganizationNameCannotBeEmpty" xml:space="preserve">
    <value>Organization name cannot be empty!</value>
  </data>
  <data name="OrganizationProfile" xml:space="preserve">
    <value>Organization Profile</value>
  </data>
  <data name="OrganizationStatusCannotBeHigherThanParent" xml:space="preserve">
    <value>The status of organization {2} cannot be set to {3} higher than {1} of its parent {0}.</value>
  </data>
  <data name="OrganizationStatusNotSpecified" xml:space="preserve">
    <value>Organization status is not specified.</value>
  </data>
  <data name="OrganizationTypeCannotBeEmpty" xml:space="preserve">
    <value>Organization type cannot be empty!</value>
  </data>
  <data name="OrganizationTypeDomainCannotBeEmpty" xml:space="preserve">
    <value>Organization type domain cannot be empty!</value>
  </data>
  <data name="OrganizationTypeNameCannotBeEmpty" xml:space="preserve">
    <value>Organization type name cannot be empty!</value>
  </data>
  <data name="ParentArea" xml:space="preserve">
    <value>Parent: {0}</value>
  </data>
  <data name="ParentOrganizationCircularReference" xml:space="preserve">
    <value>The parent organization has circular reference as {0}.</value>
  </data>
  <data name="PasswordAnswerCannotBeEmpty" xml:space="preserve">
    <value>Password answer cannot be empty.</value>
  </data>
  <data name="PasswordAnswerInvalidLength" xml:space="preserve">
    <value>Password answer should not be greater than 256 characters.</value>
  </data>
  <data name="PasswordAnswerTooLong" xml:space="preserve">
    <value>Password answer is too long.</value>
  </data>
  <data name="PasswordCannotBeEmpty" xml:space="preserve">
    <value>Password cannot be empty!</value>
  </data>
  <data name="PasswordFormatIsInvalid" xml:space="preserve">
    <value>Password is invalid - not match the format {0}!</value>
  </data>
  <data name="PasswordInvalid" xml:space="preserve">
    <value>Password should not be empty or greater than 128 characters.</value>
  </data>
  <data name="PasswordLengthLessThanRequired" xml:space="preserve">
    <value>Password length cannot be less than {0} characters!</value>
  </data>
  <data name="PasswordLessThanMinLength" xml:space="preserve">
    <value>Password length should not be less than {0} characters.</value>
  </data>
  <data name="PasswordLessThanMinRequiredNonAlphanumericCharacters" xml:space="preserve">
    <value>Password contains less than {0} non alphanumeric characters.</value>
  </data>
  <data name="PasswordNotEqualToConfirmPassword" xml:space="preserve">
    <value>Password is not equal to password confirm!</value>
  </data>
  <data name="PasswordQuestionCannotBeEmpty" xml:space="preserve">
    <value>Password question cannot be empty for user.</value>
  </data>
  <data name="PasswordQuestionInvalidLength" xml:space="preserve">
    <value>Password question should not be greater than 256 characters.</value>
  </data>
  <data name="PasswordTooLong" xml:space="preserve">
    <value>Password is too long.</value>
  </data>
  <data name="RoleNameCannotBeEmpty" xml:space="preserve">
    <value>Role name cannot be empty!</value>
  </data>
  <data name="UnauthorizedAccess" xml:space="preserve">
    <value>The request is not authorized.</value>
  </data>
  <data name="UserEmailCannotBeEmpty" xml:space="preserve">
    <value>User email cannot be empty.</value>
  </data>
  <data name="UserEmailCannotBeGreaterThan256Characters" xml:space="preserve">
    <value>User email should not be greater than 256 characters.</value>
  </data>
  <data name="UserHasBeenLockedOut" xml:space="preserve">
    <value>The user is locked out by too many failed password attempts.</value>
  </data>
  <data name="UserNameCannotBeEmpty" xml:space="preserve">
    <value>User name cannot be empty!</value>
  </data>
  <data name="UserObjectCannotBeNull" xml:space="preserve">
    <value>User Object cannot be null!</value>
  </data>
  <data name="UserProfile" xml:space="preserve">
    <value>User Profile</value>
  </data>
</root>