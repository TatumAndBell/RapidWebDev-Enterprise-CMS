<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RapidWebDev.Platform</name>
    </assembly>
    <members>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.UserManagement">
            <summary>
            User management dynamic page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserManagement.authenticationContext">
            <summary>
            Protected authentication context.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserManagement.roleApi">
            <summary>
            Protected role Api.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserManagement.membershipApi">
            <summary>
            Protected membership Api.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserManagement.Query(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Execute query for results binding to dynamic page grid.
            </summary>
            <param name="parameter">Query parameter.</param>
            <returns>Returns query results.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserManagement.Delete(System.String)">
            <summary>
            Delete role by id.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserManagement.OnGridRowControlsBind(RapidWebDev.UI.DynamicPages.GridRowControlBindEventArgs)">
            <summary>
            Not approved users cannot be edited and deleted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserManagement.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserManagement.CreateCustomQuery(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Create custom query expression which will be used with input query parameter to execute query by the method Query.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataManagement">
            <summary>
            Concrete data management dynamic page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataManagement.authenticationContext">
            <summary>
            Protected authentication context.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataManagement.concreteDataApi">
            <summary>
            Protected concrete data Api.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataManagement.Query(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Execute query for results binding to dynamic page grid.
            </summary>
            <param name="parameter">Query parameter.</param>
            <returns>Returns query results.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataManagement.Delete(System.String)">
            <summary>
            Delete concrete data by id.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataManagement.OnGridRowControlsBind(RapidWebDev.UI.DynamicPages.GridRowControlBindEventArgs)">
            <summary>
            Not approved concrete datas cannot be edited and deleted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataManagement.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataManagement.CreateCustomQuery(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Create custom query expression which will be used with input query parameter to execute query by the method Query.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Web.Controls.UserLink">
            <summary>
            HyperLink to User Profile page.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.UserLink.OnPreRender(System.EventArgs)">
            <summary>
            Raises the System.Web.UI.Control.PreRender event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.UserLink.BuildUserLink(System.String)">
            <summary>
            Build HTML fragment which contains a link to user profile page.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.UserLink.UserId">
            <summary>
            Sets/gets user id.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.Controls.OrganizationSelector">
            <summary>
            Organization selector web control.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.OrganizationSelector.OnLoad(System.EventArgs)">
            <summary>
            Raises the System.Web.UI.Control.Load event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.OrganizationSelector.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based 
            implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.OrganizationSelector.OnPreRender(System.EventArgs)">
            <summary>
            Raises the System.Web.UI.Control.PreRender event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.OrganizationSelector.MaxItemCount">
            <summary>
            Sets/gets max items rendered as selection candidate, defaults to 25.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.OrganizationSelector.Domain">
            <summary>
            Sets/gets domain which the selectable organizations belong to.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.OrganizationSelector.OrganizationTypeId">
            <summary>
            Sets/gets organization type which the selectable organizations should belong to.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.OrganizationSelector.SelectedOrganizationChangedCallback">
            <summary>
            Sets/gets client event when the selected organization changed. 
            The signature of javascript callback method should be as: "function MethodName(string newValue, string oldValue) { }"
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.OrganizationSelector.SelectedOrganization">
            <summary>
            Sets/gets selected organization.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.OrganizationSelector.Text">
            <summary>
            Text of the control.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.IPermissionApi">
            <summary>
            Permission API interface.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IPermissionApi.SetRolePermissions(System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set permissions on specified role. The new permissions will overwrite the existed permissions of the role.
            </summary>
            <param name="roleId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IPermissionApi.SetUserPermissions(System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set permissions on specified user. The new permissions will overwrite the existed permissions of the user.
            </summary>
            <param name="userId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IPermissionApi.FindUserPermissions(System.Guid,System.Boolean)">
            <summary>
            Get permissions which the user has.
            </summary>
            <param name="userId">specified user</param>
            <param name="explicitOnly">true indicates that returns the permissions only directly set on the user</param>
            <returns>returns user permissions</returns>
        </member>
        <member name="M:RapidWebDev.Platform.IPermissionApi.FindRolePermissions(System.Guid)">
            <summary>
            Get permissions which the role has.
            </summary>
            <param name="roleId">specified role</param>
            <returns>returns role permissions</returns>
        </member>
        <member name="M:RapidWebDev.Platform.IPermissionApi.HasPermission(System.Guid,System.String)">
            <summary>
            Returns true if input user has the permission.
            The permissions owned by the user includes the ones inherited from the roles of the user implicitly.
            </summary>
            <param name="userId">user id</param>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if input user has the permission.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.IPermissionApi.HasPermission(System.String)">
            <summary>
            Returns true if the current authenticated user has any permissions in specified permission.
            </summary>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if the current user has permission to access permission key.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.IPermissionApi.FindPermissionConfig(System.Guid)">
            <summary>
            Returns all permission configurations owned by specified user.
            </summary>
            <param name="operateUserId">operate user id</param>
            <returns>Returns all permission configurations owned by specified user.</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.IInstallerManager">
            <summary>
            The interface to manage all installer instances.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.IInstallerManager.Install(System.String)">
            <summary>
            Install application
            </summary>
            <param name="applicationName">application name to install</param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.IInstallerManager.Uninstall(System.String)">
            <summary>
            Uninstall application
            </summary>
            <param name="applicationName">application name to uninstall</param>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.IInstallerManager.Installers">
            <summary>
            Gets/sets enumerable installers.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.IHierarchyService">
            <summary>
            The service to operate areas
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.SaveJson(RapidWebDev.Platform.HierarchyDataObject)">
            <summary>
            Save a hierarchy data object. <br/>
            Uri Template: json/Save
            </summary>
            <param name="hierarchyDataObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.SaveXml(RapidWebDev.Platform.HierarchyDataObject)">
            <summary>
            Save a hierarchy data object. <br/>
            Uri Template: xml/Save
            </summary>
            <param name="hierarchyDataObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetHierarchyDataByIdJson(System.String)">
            <summary>
            Get a hierarchy data object by id. <br/>
            Uri Template: json/GetHierarchyDataById/{hierarchyDataId}
            </summary>
            <param name="hierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetHierarchyDataByIdXml(System.String)">
            <summary>
            Get a hierarchy data object by id.<br/>
            Uri Template: xml/GetHierarchyDataById/{hierarchyDataId}
            </summary>
            <param name="hierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetHierarchyDataByNameJson(System.String,System.String)">
            <summary>
            Get a hierarchy data object by name.<br/>
            Uri Template: json/GetHierarchyDataByName/{hierarchyType}/{hierarchyDataName}
            </summary>
            <param name="hierarchyType"></param>
            <param name="hierarchyDataName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetHierarchyDataByNameXml(System.String,System.String)">
            <summary>
            Get a hierarchy data object by name.<br/>
            Uri Template: xml/GetHierarchyDataByName/{hierarchyType}/{hierarchyDataName}
            </summary>
            <param name="hierarchyType"></param>
            <param name="hierarchyDataName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetImmediateChildrenJson(System.String,System.String)">
            <summary>
            Get all children of the specified hierarchy data by id.<br/>
            Uri Template: json/GetImmediateChildrenJson/{hierarchyType}/{parentHierarchyDataId}
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetImmediateChildrenXml(System.String,System.String)">
            <summary>
            Get all children of the specified hierarchy data by id.<br/>
            Uri Template: xml/GetImmediateChildrenJson/{hierarchyType}/{parentHierarchyDataId}
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetAllChildrenJson(System.String,System.String)">
            <summary>
            Get all children of the specified hierarchy data includes not immediately.<br/>
            Uri Template: json/GetAllChildrenJson/{hierarchyType}/{parentHierarchyDataId}
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetAllChildrenXml(System.String,System.String)">
            <summary>
            Get all children of the specified hierarchy data includes not immediately.<br/>
            Uri Template: xml/GetAllChildrenJson/{hierarchyType}/{parentHierarchyDataId}
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetAllHierarchyDataJson(System.String)">
            <summary>
            Get all hierarchy data in specified hierarchy type.<br/>
            Uri Template: json/GetAllHierarchyDataJson/{hierarchyType}
            </summary>
            <param name="hierarchyType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.GetAllHierarchyDataXml(System.String)">
            <summary>
            Get all hierarchy data in specified hierarchy type.<br/>
            Uri Template: xml/GetAllHierarchyDataJson/{hierarchyType}
            </summary>
            <param name="hierarchyType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.HardDeleteHierarchyDataJson(System.String)">
            <summary>
            Hard delete a hierarchy data with all its children by id. <br/>
            Uri Template: json/HardDeleteHierarchyData/{hierarchyDataId}
            </summary>
            <param name="hierarchyDataId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.HardDeleteHierarchyDataXml(System.String)">
            <summary>
            Hard delete a hierarchy data with all its children by id. <br/>
            Uri Template: xml/HardDeleteHierarchyData/{hierarchyDataId}
            </summary>
            <param name="hierarchyDataId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.FindByKeywordJson(System.String,System.String,System.Int32)">
            <summary>
            Find all hierarchies which include the query keyword in code or name.<br/>
            Uri Template: json/FindByKeyword?hierarchyType={hierarchyType}&amp;q={query}&amp;limit={maxReturnedCount}
            </summary>
            <param name="hierarchyType"></param>
            <param name="query"></param>
            <param name="maxReturnedCount"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.FindByKeywordXml(System.String,System.String,System.Int32)">
            <summary>
            Find all hierarchies which include the query keyword in code or name.<br/>
            Uri Template: xml/FindByKeyword?hierarchyType={hierarchyType}&amp;q={query}&amp;limit={maxReturnedCount}
            </summary>
            <param name="hierarchyType"></param>
            <param name="query"></param>
            <param name="maxReturnedCount"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.QueryHierarchyDataJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query hierarchy data in all types by custom predicates.<br/>
            Uri Template: json/QueryHierarchyData?pageIndex={pageIndex}&amp;pageSize={pageSize}&amp;orderby={orderby}
            </summary>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="predicate">linq predicate which supports properties of <see cref="T:RapidWebDev.Platform.HierarchyDataObject"/> for query expression.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IHierarchyService.QueryHierarchyDataXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query hierarchy data in all types by custom predicates.<br/>
            Uri Template: xml/QueryHierarchyData?pageIndex={pageIndex}&amp;pageSize={pageSize}&amp;orderby={orderby}
            </summary>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="predicate">linq predicate which supports properties of <see cref="T:RapidWebDev.Platform.HierarchyDataObject"/> for query expression.</param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.HierarchyDataQueryResult">
            <summary>
            Hierarchy data query result
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyDataQueryResult.#ctor(System.Collections.Generic.IList{RapidWebDev.Platform.HierarchyDataObject})">
            <summary>
            Constructor
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyDataQueryResult.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.HierarchyDataQueryResult.PageIndex">
            <summary>
            Page index which starts from 0.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.HierarchyDataQueryResult.PageSize">
            <summary>
            Page size.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.HierarchyDataQueryResult.TotalRecordCount">
            <summary>
            Total record count.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.IdCollection">
            <summary>
            Collection of identities.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IdCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IdCollection.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="ids"></param>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.IApplicationNameRouter">
            <summary>
            Application name loader.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.IApplicationNameRouter.GetApplicationName">
            <summary>
            Get application name.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel">
            <summary>
            Hierarchy data detail panel page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.authenticationContext">
            <summary>
            Protected authentication context
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.hierarchyApi">
            <summary>
            Protected hierarchy Api
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.ComboBoxParentHierarchyData">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.TextBoxName">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.TextBoxDescription">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.ExtensionDataForm">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.PlaceHolderOperatorContext">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.UserLinkCreatedBy">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.TextBoxCreatedDate">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.UserLinkLastUpdatedBy">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.TextBoxLastUpdatedDate">
            <summary />
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.Create">
            <summary>
            Create a new hierarchy data from detail panel and return its id.
            The method needs to create a new entity and set control values to its properties then persist it.
            </summary>
            <returns>returns the id of new created hierarchy data.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.Update(System.String)">
            <summary>
            Update an existed hierarchy data from detail panel.
            The method needs to load an existed entity by specified id and set control values to overwrite its original properties then persist it.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.Reset">
            <summary>
            Reset all controls of the detail panel to initial state.
            The method will be invoked when enables the detail panel to support creating entities continuously.
            After an entity been created, the method will be invoked to reset form controls for another input.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.LoadWritableEntity(System.String)">
            <summary>
            The method is designed to load entity by id to editable detail panel controls.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.OnLoad(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.DetailPanelPageEventArgs)">
            <summary>
            The method will be invoked when detail panel is loaded.
            The implementation can resolve current visiting Page from the conversation as (HttpContext.Current.Handler as Page).
            </summary>
            <param name="sender">The web page which contains the detail panel.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.ResolveExtensionDataTypeId">
            <summary>
            Resolve extension data type id. Returns Guid.Empty by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.ValidateInput(System.Guid)">
            <summary>
            Validate data input of hierarchy data.
            </summary>
            <param name="hierarchyDataObjectId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataDetailPanel.BindParentHierarchyData">
            <summary>
            Bind the combobox of parent hierarchy data.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowOrganizationName">
            <summary>
            Show organization name by organization id.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowOrganizationName.Format(System.String,System.Object)">
            <summary>
            Format input field value. 
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.IOrganizationApi">
            <summary>
            The organization API is used for CRUD organizations and organization types.
            The concept "organization" can be any organizations as government, company, department, customer, team, group, vendor, etc.<br/><br/>
            The Organization Model of RapidWebDev has 3 concepts "Domain" &gt; "Organization Type" &gt; "Organization".
            "Domain" is used to categorize organizations in business. Normally the organizations in different domain map to different business workflow. 
            "Organization Type" belongs to a domain which is used to categorize organizations for classification purpose.<br/><br/>
            Take e-bussiness website as an example, there may have 3 domains, "Vendor", "Division" and "Customer".
            "Vendor" means where the website buys the products. The users in "Vendor" organizations can login system to query what and how many products they provided to the website.
            And we still need to categorize vendors into 3 "Organization Type" as "IT Products Vendor", "Clothes Vendor" and "Furniture Vendor".
            Then we can create a "IT Products Vendor" organization in the system.<br/>
            "Division" means the internal department of the website. There may have "Organization Type" like "Sales", "IT Department", "Customer Service", "Management Team", "Website Maintenance Team" etc.<br/>
            We may define "Individual Customer", "VIP Customer", "Enterprise Customer" in the domain "Customer".<br/><br/>
            Unfortunately, every user should belong to an existed organization. And every organization should belong to an existed organization type which associated with a domain.
            So in the business application built on RapidWebDev, there should have at least one organization with one organization type in a domain.
            The organization domains cannot be changed by application users but only can be configured in IPlatformConfiguration in Spring.NET IoC by developers.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.Save(RapidWebDev.Platform.OrganizationTypeObject)">
            <summary>
            Save organization type object.
            </summary>
            <param name="organizationTypeObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">etc organization type name does exist.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.GetOrganizationType(System.Guid)">
            <summary>
            Get organization type by id.
            </summary>
            <param name="organizationTypeId">organization type id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.GetOrganizationType(System.String)">
            <summary>
            Get organization type by name.
            </summary>
            <param name="organizationTypeName">organization type name</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.FindOrganizationTypes">
            <summary>
            Find all organization types including soft deleted in current application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.FindOrganizationTypes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Find all organization types in specified domains in current application including soft deleted.
            </summary>
            <param name="domains"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.Save(RapidWebDev.Platform.OrganizationObject)">
            <summary>
            Save organization business object. 
            If organizationObject.Id equals Guid.Empty, it means to save a new organization. 
            Otherwise it's updating an existed organization.
            </summary>
            <param name="organizationObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.BulkGetOrganizations(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Find organization objects by enumerable organization ids.
            </summary>
            <param name="organizationIdList">organization ids</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.GetOrganization(System.Guid)">
            <summary>
            Get organization instance by id.
            </summary>
            <param name="organizationId">organization id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.GetOrganizationByName(System.String)">
            <summary>
            Get organization instance by name.
            </summary>
            <param name="organizationName">organization name</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.GetOrganizationByCode(System.String)">
            <summary>
            Get organization instance by code.
            </summary>
            <param name="organizationCode">organization code</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IOrganizationApi.FindOrganizations(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find organization business objects by custom predicates.
            </summary>
            <param name="predicate">linq predicate. see organization properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Organization"/>.</param>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="recordCount">total hit records count</param>
            <returns>Returns enumerable organizations</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.IOrganizationService">
            <summary>
            The service to operate organizations for the authenticated user.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.ListDomainsJson">
            <summary>
            Lists all available organization domains.
            UriTemplate = "json/ListDomains"
            </summary>		
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.ListDomainsXml">
            <summary>
            Lists all available organization domains.	
            UriTemplate = "xml/ListDomains"
            </summary>	
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.SaveOrganizationTypeJson(RapidWebDev.Platform.OrganizationTypeObject)">
            <summary>
            Add/Update organization type object.
            UriTemplate = "json/SaveOrganizationType"
            </summary>		
            <param name="organizationTypeObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">etc organization type name does exist.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.SaveOrganizationTypeXml(RapidWebDev.Platform.OrganizationTypeObject)">
            <summary>
            Add/Update organization type object.
            UriTemplate = "xml/SaveOrganizationType"
            </summary>		
            <param name="organizationTypeObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">etc organization type name does exist.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationTypeByIdJson(System.String)">
            <summary>
            Get the organization type by id.
            UriTemplate = "json/GetOrganizationTypeById/{organizationTypeId}"
            </summary>
            <param name="organizationTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationTypeByIdXml(System.String)">
            <summary>
            Get the organization type by id.
            UriTemplate = "xml/GetOrganizationTypeById/{organizationTypeId}"
            </summary>
            <param name="organizationTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationTypeByNameJson(System.String)">
            <summary>
            Get the organization type by name.
            UriTemplate = "json/GetOrganizationTypeByName/{organizationTypeName}"
            </summary>
            <param name="organizationTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationTypeByNameXml(System.String)">
            <summary>
            Get the organization type by name.
            UriTemplate = "xml/GetOrganizationTypeByName/{organizationTypeName}"
            </summary>
            <param name="organizationTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.FindOrganizationTypesJson(System.String)">
            <summary>
            Find organization types in specified domain.
            UriTemplate = "json/FindOrganizationTypes/{domain}"
            </summary>		
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.FindOrganizationTypesXml(System.String)">
            <summary>
            Find organization types in specified domain.
            UriTemplate = "xml/FindOrganizationTypes/{domain}"
            </summary>		
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.SaveOrganizationJson(RapidWebDev.Platform.OrganizationObject)">
            <summary>
            Add/Update organization  object.
            UriTemplate = "json/SaveOrganization"
            </summary>		
            <param name="organizationObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">etc organization type name does exist.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.SaveOrganizationXml(RapidWebDev.Platform.OrganizationObject)">
            <summary>
            Add/Update organization  object.
            UriTemplate = "json/SaveOrganization"
            </summary>		
            <param name="organizationObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">etc organization type name does exist.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationByIdJson(System.String)">
            <summary>
            Get the organization by id.
             UriTemplate = "json/GetOrganizationById/{organizationId}"
            </summary>		
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationByIdXml(System.String)">
            <summary>
            Get the organization by id.
             UriTemplate = "xml/GetOrganizationById/{organizationId}"
            </summary>		
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationByCodeJson(System.String)">
            <summary>
            Get the organization by code.
             UriTemplate = "json/GetOrganizationByCode/{organizationCode}"
            </summary>		
            <param name="organizationCode"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationByCodeXml(System.String)">
            <summary>
            Get the organization by code.
             UriTemplate = "xml/GetOrganizationByCode/{organizationCode}"
            </summary>		
            <param name="organizationCode"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationByNameJson(System.String)">
            <summary>
            Get the organization by name.
             UriTemplate = "json/GetOrganizationByName/{organizationName}"
            </summary>		
            <param name="organizationName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.GetOrganizationByNameXml(System.String)">
            <summary>
            Get the organization by name.
             UriTemplate = "xml/GetOrganizationByName/{organizationName}"
            </summary>		
            <param name="organizationName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.BulkGetOrganizationsByIdsJson(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Find organizations by organization ids.
            UriTemplate = "json/BulkGetOrganizationsByIds"
            </summary>
            <param name="organizationIdList">organization ids</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.BulkGetOrganizationsByIdsXml(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Find organizations by organization ids.
            UriTemplate = "xml/BulkGetOrganizationsByIds"
            </summary>
            <param name="organizationIdList">organization ids</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.SearchJson(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Search organizations by a collection of criterias for the authenticated user of request.
            UriTemplate = "json/search?domain={domain}&amp;q={q}&amp;start={start}&amp;limit={limit}&amp;sortfield={sortField}&amp;sortDirection={sortDirection}&amp;orgTypeId={orgTypeId}"
            </summary>        
            <param name="domain">Which domain of the searching organizations.</param>
            <param name="orgTypeId">Which organization type the searching organizations should belong to.</param>
            <param name="q">Keywords for searching.</param>
            <param name="sortField">Sorting field name, the default sorting field is LastUpdatedDate.</param>
            <param name="sortDirection">Sorting order, DESC or ASC, the default sorting order is DESC.</param>
            <param name="start">The start organization index of hit to return.</param>
            <param name="limit">The limit of returned organizations.</param>
            <returns>The query results object includes total hit count, returned records, start and limit.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.SearchXml(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Search organizations by a collection of criterias for the authenticated user of request.
            UriTemplate = "xml/search?domain={domain}&amp;q={q}&amp;start={start}&amp;limit={limit}&amp;sortfield={sortField}&amp;sortDirection={sortDirection}&amp;orgTypeId={orgTypeId}"
            </summary>        
            <param name="domain">Which domain of the searching organizations.</param>
            <param name="orgTypeId">Which organization type the searching organizations should belong to.</param>
            <param name="q">Keywords for searching.</param>
            <param name="sortField">Sorting field name, the default sorting field is LastUpdatedDate.</param>
            <param name="sortDirection">Sorting order, DESC or ASC, the default sorting order is DESC.</param>
            <param name="start">The start organization index of hit to return.</param>
            <param name="limit">The limit of returned organizations.</param>
            <returns>The query results object includes total hit count, returned records, start and limit.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.QueryOrganizationsJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query organizations by custom predicates.
            UriTemplate = "json/QueryOrganizations?pageindex={pageIndex}&amp;pagesize={pageSize}&amp;orderby={orderby}"
            </summary>
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>       
            <param name="predicate">linq predicate. see organization properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Organization"/>.</param>
            <returns>Returns organizations</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IOrganizationService.QueryOrganizationsXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query organizations by custom predicates.
            UriTemplate = "xml/QueryOrganizations?pageindex={pageIndex}&amp;pagesize={pageSize}&amp;orderby={orderby}"
            </summary>
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>       
            <param name="predicate">linq predicate. see organization properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Organization"/>.</param>
            <returns>Returns organizations</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.OrganizationQueryResult">
            <summary>
            Use Data query result
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationQueryResult.#ctor(System.Collections.Generic.IList{RapidWebDev.Platform.OrganizationObject})">
            <summary>
            Constructor
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationQueryResult.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.OrganizationQueryResult.PageIndex">
            <summary>
            Page index which starts from 0.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.OrganizationQueryResult.PageSize">
            <summary>
            Page size.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.OrganizationQueryResult.TotalRecordCount">
            <summary>
            Total record count.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.OrganizationTypeObject">
            <summary>
            Organization type business object.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.OrganizationTypeObject.ToString">
            <summary>
            Display this instance as organization type name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.OrganizationTypeObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.OrganizationTypeObject.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.OrganizationTypeObject.Clone">
            <summary>
            Get the copy of current object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationTypeObject.OrganizationTypeId">
            <summary>
            Set/get organization type id.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationTypeObject.Domain">
            <summary>
            Set/get organization type domain.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationTypeObject.Name">
            <summary>
            Set/get organization type name.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationTypeObject.Description">
            <summary>
            Set/get organization type description
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationTypeObject.LastUpdatedDate">
            <summary>
            Sets/gets organization type last updated date.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationTypeObject.Predefined">
            <summary>
            Sets/gets if the organization type is predefined
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationTypeObject.DeleteStatus">
            <summary>
            Sets/gets delete status
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.PermissionObject">
            <summary>
            The permission instance parsed from string-typed permission value. 
            It provides the method "Contains" to check whether a permission is included/implied in another.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObject.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObject.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="permissionValue"></param>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObject.Contains(System.String)">
            <summary>
            Returns true when this permission covers the other.<br/>
            The check algorithm is,<br/>
            1) If other equals to "EveryOne" or "Anonymous", returns true. <br/>
            2) Otherwise, if current permission value equals to "EveryOne" or "Anonymous", returns false. <br/>
            3) Then the method compares each segment of "this" and "other" PermissionObject. 
            The comparing algorithm is implied in the following example. 
            "XXX.All" contains all permission values started with "XXX." and "XXX" itself, e.g. "XXX.Update", "XXX.Delete", "XXX.View".
            "XXX.YYY" contains all permission values started with "XXX.YYY" and ended with ".View", e.g. "XXX.YYY.View", "XXX.YYY.ZZZ.View".
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObject.Contains(RapidWebDev.Platform.PermissionObject)">
            <summary>
            Returns true when this permission covers the other.<br/>
            The check algorithm is,<br/>
            1) If other equals to "EveryOne" or "Anonymous", returns true. <br/>
            2) Otherwise, if current permission value equals to "EveryOne" or "Anonymous", returns false. <br/>
            3) Then the method compares each permission segment of "this" and "other" PermissionObject. 
            The comparing algorithm is implied in the following example. 
            "XXX.All" contains all permission values started with "XXX." and "XXX" itself, e.g. "XXX.Update", "XXX.Delete", "XXX.View".
            "XXX.YYY" contains all permission values started with "XXX.YYY" and ended with ".View", e.g. "XXX.YYY.View", "XXX.YYY.ZZZ.View".
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObject.ToString">
            <summary>
            Returns explicit permission value which associated with users and roles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObject.Equals(System.Object)">
            <summary>
            Returns true if this instance equals to target object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObject.GetHashCode">
            <summary>
            Get hash code of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObject.op_Implicit(RapidWebDev.Platform.PermissionObject)~System.String">
            <summary>
            Convert PermissionObject to string implicitly.
            </summary>
            <param name="permissionObject"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObject.op_Implicit(System.String)~RapidWebDev.Platform.PermissionObject">
            <summary>
            Convert string to PermissionObject implicitly.
            </summary>
            <param name="permissionValue"></param>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionObject.PermissionValue">
            <summary>
            The explicit permission value which associated with users and roles.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionObject.Segments">
            <summary>
            
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionObject.IsEveryOne">
            <summary>
            Get true if the permission value equals to EveryOne.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionObject.IsAnonymous">
            <summary>
            Get true if the permission value equals to Anonymous.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObjectEnumerableExtensions.FilterDeniedPemissions(System.Collections.Generic.IEnumerable{RapidWebDev.Platform.PermissionObject})">
            <summary>
            Filter the denied permissions in the enumerable permissions.
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.PermissionObjectEnumerableExtensions.MergeUserAndRolePermissions(System.Collections.Generic.IEnumerable{RapidWebDev.Platform.PermissionObject},System.Collections.Generic.IEnumerable{RapidWebDev.Platform.PermissionObject})">
            <summary>
            Merge permissions of the user with its roles. The both positive and denied permissions of the user override the conflicting permissions from the roles.
            </summary>
            <param name="userPermissions"></param>
            <param name="rolePermissions"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.OrganizationApi">
            <summary>
            The implementation organization API which intents to cache all organization types and organizations and interact with database by linq-2-sql OrganizationDbProvider.
            </summary>
            <summary>
            The implementation organization API which intents to cache all organization types and organizations and interact with database by linq-2-sql OrganizationDbProvider.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.Save(RapidWebDev.Platform.OrganizationObject)">
            <summary>
            Save organization business object. 
            If organizationObject.Id equals Guid.Empty, it means to save a new organization. 
            Otherwise it's updating an existed organization.
            </summary>
            <param name="organizationObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.BulkGetOrganizations(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Find organization elements by enumerable organization ids.
            </summary>
            <param name="organizationIdList">enumerabe organization type ids, null or empty value indicates to query all organizations</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.GetOrganization(System.Guid)">
            <summary>
            Get organization instance by id.
            </summary>
            <param name="organizationId">organization id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.GetOrganizationByName(System.String)">
            <summary>
            Get organization instance by name.
            </summary>
            <param name="organizationName">organization name</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.GetOrganizationByCode(System.String)">
            <summary>
            Get organization instance by code.
            </summary>
            <param name="organizationCode">organization code</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.FindOrganizations(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find organization business objects by custom predicates.
            </summary>
            <param name="predicate">linq predicate. see organization properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Organization"/>.</param>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="recordCount">total hit records count</param>
            <returns>Returns enumerable organizations</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.SaveOrganization(RapidWebDev.Platform.OrganizationObject)">
            <summary>
            Save organization business object. 
            If organizationObject.Id equals Guid.Empty, it means to save a new organization. 
            Otherwise it's updating an existed organization.
            </summary>
            <param name="organizationObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.VerifyStatusAgainstParentOrganization(RapidWebDev.Platform.OrganizationObject,RapidWebDev.Platform.OrganizationStatus,System.String,RapidWebDev.Common.Validation.ValidationScope)">
            <summary>
            Validation on if there specifies parent organization to new created one, the status of new organization must be lower priority than its parent.
            Organization status priority: Enabled &gt; Pending &gt; Disabled.
            </summary>
            <param name="parentOrganizationObject"></param>
            <param name="status"></param>
            <param name="organizationName"></param>
            <param name="validationScope"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.BulkGetOrganizationsFromDB(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Find organization elements by enumerable organization ids.
            </summary>
            <param name="organizationIdList">enumerabe organization type ids, null or empty value indicates to query all organizations</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.#ctor(RapidWebDev.Platform.IAuthenticationContext,RapidWebDev.Platform.Initialization.IPlatformConfiguration,RapidWebDev.Platform.IHierarchyApi)">
            <summary>
            Construct OrganizationApi instance.
            </summary>
            <param name="authenticationContext"></param>
            <param name="platformConfiguration"></param>
            <param name="hierarchyApi"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.Save(RapidWebDev.Platform.OrganizationTypeObject)">
            <summary>
            Save organization type object.
            </summary>
            <param name="organizationTypeObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">etc organization type name does exist.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.GetOrganizationType(System.Guid)">
            <summary>
            Get organization type business object by id.
            </summary>
            <param name="organizationTypeId">organization type id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.GetOrganizationType(System.String)">
            <summary>
            Get organization type by name.
            </summary>
            <param name="organizationTypeName">organization type name</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.FindOrganizationTypes">
            <summary>
            Find all organization types for current application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.OrganizationApi.FindOrganizationTypes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Find all organization types in specified domains in current application.
            </summary>
            <param name="domains"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.Application">
            <summary>
            Application Entity.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.Organization">
            <summary>
            Organization Entity.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.User">
            <summary>
            User Entity.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.ConcreteData">
            <summary>
            Concrete Data Entity.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.HierarchyData">
            <summary>
            Hierarchy Data Entity.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.IApplicationApi">
            <summary>
            API to manage applications in SAAS system.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IApplicationApi.Save(RapidWebDev.Platform.ApplicationObject)">
            <summary>
            Save application. Empty application id of application object means that the specified application object is new created. 
            And after it's inserted into database, the database generated id will be set back to property id.
            Non-empty application id means to update an existed application. 
            If the non-empty application id is not available in database, it throws exception ValidationException.
            </summary>
            <param name="applicationObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">If the non-empty application id is not available in database, it throws exception ValidationException.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.IApplicationApi.Get(System.Guid)">
            <summary>
            Get application biz object by id. Returns null if the application id is invalid.
            </summary>
            <param name="applicationId"></param>
            <returns>returns null if the application id is invalid.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.IApplicationApi.Get(System.String)">
            <summary>
            Get application biz object by name with ignoring character case. Returns null if the application id is invalid.
            </summary>
            <param name="applicationName"></param>
            <returns>Returns null if the application name is invalid.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.IApplicationApi.Exists(System.String)">
            <summary>
            Returns true if specified application name exists with ignoring character case.
            </summary>
            <param name="applicationName"></param>
            <returns>Returns true if specified application name exists.</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.SequenceService">
            <summary>
            external service for populate sequence number
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.ISequenceService">
            <summary>
            external service for populate Sequence Number
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ISequenceService.CreateSingleJson(System.String,System.String)">
            <summary>
            Create sequence number on specified type for special object id.
            The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            UriTemplate = "json/CreateSingle?objectId={objectId}&amp;sequenceNoType={sequenceNoType}"
            </summary>        
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ISequenceService.CreateSingleXml(System.String,System.String)">
            <summary>
            Create sequence number on specified type for special object id.
            The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            UriTemplate = "json/CreateSingle?objectId={objectId}&amp;sequenceNoType={sequenceNoType}"
            </summary>        
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ISequenceService.CreateMultipleJson(System.String,System.String,System.String)">
            <summary>
            Create sequence numbers on specified sequence number type.
             The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            UriTemplate = "json/CreateMultiple?objectId={objectId}&amp;sequenceNoType={sequenceNoType}&amp;sequenceNoCount={sequenceNoCount}"
            </summary>        
            <param name="objectId"></param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <param name="sequenceNoCount">Indicates how many sequence number is required.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ISequenceService.CreateMultipleXml(System.String,System.String,System.String)">
            <summary>
            Create sequence numbers on specified sequence number type.
             The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            UriTemplate = "xml/CreateMultiple?objectId={objectId}&amp;sequenceNoType={sequenceNoType}&amp;sequenceNoCount={sequenceNoCount}"
            </summary>        
            <param name="objectId"></param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <param name="sequenceNoCount">Indicates how many sequence number is required.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.SequenceService.CreateSingleJson(System.String,System.String)">
            <summary>
            Create sequence number on specified type for special object id.
            The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.SequenceService.CreateMultipleJson(System.String,System.String,System.String)">
            <summary>
            Create sequence numbers on specified type for special object id.
             The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <param name="sequenceNoCount">Indicates how many sequence number is required.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.SequenceService.CreateSingleXml(System.String,System.String)">
            <summary>
            Create sequence number on specified type for special object id.
            The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.SequenceService.CreateMultipleXml(System.String,System.String,System.String)">
            <summary>
            Create sequence numbers on specified type for special object id.
             The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <param name="sequenceNoCount">Indicates how many sequence number is required.</param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.PermissionService">
            <summary>
            
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.IPermissionService">
            <summary>
            external service for permission
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.SetRolePermissionsByJson(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set permissions on specified role. The new permissions will overwrite the existed permissions of the role.  
            UriTemplate = "json/SetRolePermission/{roleId}"
            </summary>      
            <param name="roleId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.SetRolePermissionsByXml(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set permissions on specified role. The new permissions will overwrite the existed permissions of the role.
            UriTemplate = "xml/SetRolePermission/{roleId}"
            </summary>        
            <param name="roleId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.SetUserPermissionsByJson(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set permissions on specified user. The new permissions will overwrite the existed permissions of the user.
            UriTemplate = "json/SetUserPermission/{userId}
            </summary>        
            <param name="userId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.SetUserPermissionsByXml(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set permissions on specified user. The new permissions will overwrite the existed permissions of the user.
            UriTemplate = "xml/SetUserPermission/{userId}
            </summary>        
            <param name="userId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.FindUserPermissionsByJson(System.String,System.String)">
            <summary>
            Get permissions which the user has.
            UriTemplate = "json/FindUserPermissions/{userId}/{explicitOnly}")
            </summary>        
            <param name="userId">specified user</param>
            <param name="explicitOnly">true indicates that returns the permissions only directly set on the user</param>
            <returns>returns user permissions' values</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.FindUserPermissionsByXml(System.String,System.String)">
            <summary>
            Get permissions which the user has.
            UriTemplate = "xml/FindUserPermissions/{userId}/{explicitOnly}")
            </summary>        
            <param name="userId">specified user</param>
            <param name="explicitOnly">true indicates that returns the permissions only directly set on the user</param>
            <returns>returns user permissions' values</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.FindRolePermissionsByJson(System.String)">
            <summary>
            Get permissions which the role has. 
            UriTemplate = "json/FindUserPermissions/{roleId}
            </summary>       
            <param name="roleId">specified role</param>
            <returns>returns role permissions' values</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.FindRolePermissionsByXml(System.String)">
            <summary>
            Get permissions which the role has.
            UriTemplate = "xml/FindUserPermissions/{roleId}
            </summary>        
            <param name="roleId">specified role</param>
            <returns>returns role permissions' values</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.DoesTheUserHasPermissionJson(System.String,System.String)">
            <summary>
            Returns true if input user has the permission.
            The permissions owned by the user includes the ones inherited from the roles of the user implicitly.
            UriTemplate = "json/HasPermission/{userId}/{permissionValue}"
            </summary>        
            <param name="userId">user id</param>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if input user has the permission.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.DoesTheUserHasPermissionXml(System.String,System.String)">
            <summary>
            Returns true if input user has the permission.
            The permissions owned by the user includes the ones inherited from the roles of the user implicitly.
            UriTemplate = "xml/HasPermission/{userId}/{permissionValue}"
            </summary>        
            <param name="userId">user id</param>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if input user has the permission.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.DoesTheCurrentUserHavePermissionJson(System.String)">
            <summary>
            Returns true if the current authenticated user has any permissions in specified permission.
            UriTemplate = "json/HasPermissionCurrentUser/{permissionValue}"
            </summary>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if the current user has permission to access permission key.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IPermissionService.DoesTheCurrentUserHavePermissionXml(System.String)">
            <summary>
            Returns true if the current authenticated user has any permissions in specified permission.
            UriTemplate = "xml/HasPermissionCurrentUser/{permissionValue}"
            </summary>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if the current user has permission to access permission key.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.SetRolePermissionsByJson(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set permissions on specified role. The new permissions will overwrite the existed permissions of the role.
            </summary>
            <param name="roleId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.SetUserPermissionsByJson(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set permissions on specified user. The new permissions will overwrite the existed permissions of the user.
            </summary>
            <param name="userId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.FindUserPermissionsByJson(System.String,System.String)">
            <summary>
            Get permissions which the user has.
            </summary>
            <param name="userId">specified user</param>
            <param name="explicitOnly">true indicates that returns the permissions only directly set on the user</param>
            <returns>returns user permissions</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.FindRolePermissionsByJson(System.String)">
            <summary>
            Get permissions which the role has.
            </summary>
            <param name="roleId">specified role</param>
            <returns>returns role permissions</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.DoesTheUserHasPermissionJson(System.String,System.String)">
            <summary>
            Returns true if input user has the permission.
            The permissions owned by the user includes the ones inherited from the roles of the user implicitly.
            </summary>
            <param name="userId">user id</param>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if input user has the permission.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.DoesTheCurrentUserHavePermissionJson(System.String)">
            <summary>
            Returns true if the current authenticated user has any permissions in specified permission.
            </summary>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if the current user has permission to access permission key.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.SetRolePermissionsByXml(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set permissions on specified role. The new permissions will overwrite the existed permissions of the role.
            </summary>
            <param name="roleId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.SetUserPermissionsByXml(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set permissions on specified user. The new permissions will overwrite the existed permissions of the user.
            </summary>
            <param name="userId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.FindUserPermissionsByXml(System.String,System.String)">
            <summary>
            Get permissions which the user has.
            </summary>
            <param name="userId">specified user</param>
            <param name="explicitOnly">true indicates that returns the permissions only directly set on the user</param>
            <returns>returns user permissions</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.FindRolePermissionsByXml(System.String)">
            <summary>
            Get permissions which the role has.
            </summary>
            <param name="roleId">specified role</param>
            <returns>returns role permissions</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.DoesTheUserHasPermissionXml(System.String,System.String)">
            <summary>
            Returns true if input user has the permission.
            The permissions owned by the user includes the ones inherited from the roles of the user implicitly.
            </summary>
            <param name="userId">user id</param>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if input user has the permission.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.PermissionService.DoesTheCurrentUserHavePermissionXml(System.String)">
            <summary>
            Returns true if the current authenticated user has any permissions in specified permission.
            </summary>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if the current user has permission to access permission key.</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.MembershipDbProvider">
            <summary>
            Membership database provider implemented in linq-2-sql. The provide interacts with datatabase only without caching.
            The reason to create MembershipDbProvider to separate database and cache for users is to reduce the code complexity.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.#ctor(RapidWebDev.Platform.IAuthenticationContext,RapidWebDev.Platform.IOrganizationApi)">
            <summary>
            Construct membership API instance.
            </summary>
            <param name="authenticationContext"></param>
            <param name="organizationApi"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.Save(RapidWebDev.Platform.UserObject,System.String,System.String)">
            <summary>
            Save user object with specified password and password retrieval answer. 
            If it's used to update an existed user, the password allows to be null in the case that it doesn't need to change the password of the user.
            The argument "passwordAnswer" is to be validated depends on the configuration on ASP.NET Membership "RequiresQuestionAndAnswer".
            </summary>
            <param name="userObject">user business object</param>
            <param name="password">login password. If it's used to update an existed user, the password allows to be null in the case that it doesn't need to change the password of the user.</param>
            <param name="passwordAnswer">password retrieve answer. The argument "passwordAnswer" is to be validated depends on the configuration on ASP.NET Membership "RequiresQuestionAndAnswer".</param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">Save user failed by various reasons implied in exception message.</exception>
            <exception cref="T:System.ArgumentException">The property userObject.Id is specified with an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">The argument userObject is null.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.BulkGet``1(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Resolve user elements from enumerable user ids.
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.Get(System.String)">
            <summary>
            Get user by user name.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.Get(System.Guid)">
            <summary>
            Get user element by user id.
            </summary>
            <param name="userId">user id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.Login(System.String,System.String)">
            <summary>
            Validate user is authenticated to application. Both invalid credential and unauthenticated organizations will be failed logon.
            </summary>
            <param name="username">user name</param>
            <param name="password">password</param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.Logout(System.Guid)">
            <summary>
            Logout the user by id.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.Act(System.Guid)">
            <summary>
            Track the user activities online.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.ChangePassword(System.Guid,System.String,System.String)">
            <summary>
            Change password of specified user. 
            </summary>
            <param name="userId"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns>returns true if operation successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipDbProvider.FindUsers(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find user ids by predicates.
            </summary>
            <param name="predicate">linq predicate</param>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="recordCount">total hit records count</param>
            <returns>Returns enumerable user ids</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.IPlatformConfiguration">
            <summary>
            The interface contains the system initialization information.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.IPlatformConfiguration.AreaHierarchyTypeValue">
            <summary>
            Hierarchy type value of area.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.IPlatformConfiguration.OrganizationType">
            <summary>
            Gets default organization type
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.IPlatformConfiguration.Organization">
            <summary>
            Gets default organization
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.IPlatformConfiguration.Role">
            <summary>
            Gets default role.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.IPlatformConfiguration.User">
            <summary>
            Gets default user
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.IPlatformConfiguration.Password">
            <summary>
            Gets password of default user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.IPlatformConfiguration.PasswordAnswer">
            <summary>
            Gets answer to retrieve password for default user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.IPlatformConfiguration.Domains">
            <summary>
            Gets all available organization domains.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataAggregatePanel">
            <summary>
            HierarchyData aggregate panel page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataAggregatePanel.authenticationContext">
            <summary>
            Protected authentication context.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataAggregatePanel.hierarchyApi">
            <summary>
            Protected hierarchy Api.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataAggregatePanel.TreeViewHierarchyData">
            <summary />
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataAggregatePanel.OnLoad(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.AggregatePanelPageEventArgs)">
            <summary>
            Load hierarchy data into the treeview
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataAggregatePanel.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup hierarchy type information.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowUserDisplayName">
            <summary>
            Show display name of the user by user id.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowUserDisplayName.Format(System.String,System.Object)">
            <summary>
            Format input field value. 
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.SiteMapItemConfig">
            <summary>
            Sitemap Item Configuration Class.
            </summary>
            <remarks/>
        </member>
        <member name="M:RapidWebDev.Platform.SiteMapItemConfig.#ctor">
            <summary />
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.RapidWebDev#UI#ISiteMapItem#Children">
            <summary>
            Gets the children of current sitemap item.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.RapidWebDev#UI#ISiteMapItem#Type">
            <summary>
            Sitemap item type.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.Item">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.Id">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.Type">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.Text">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.Value">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.ClientSideCommand">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.PageUrl">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapItemConfig.IconClassName">
            <remarks/>
        </member>
        <member name="T:RapidWebDev.Platform.OrganizationStatus">
            <summary>
            Status of organization
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.OrganizationStatus.None">
            <summary>
            None status
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.OrganizationStatus.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.OrganizationStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.OrganizationStatus.Enabled">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.RelationshipService">
            <summary>
            external service for CRUD relationships
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.IRelationshipService">
            <summary>
            external service for CRUD relationships
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.SaveJson(System.String,System.String,System.String,System.String)">
            <summary>
            Save relationship b/w 2 entities on special relationship type.
            UriTemplate = "json/Save?objectXId={objectXId}&amp;objectYId={objectYId}&amp;RelationshipType={RelationshipType}&amp;Ordinal={Ordinal}"
            </summary>        
            <param name="objectXId"></param>
            <param name="objectYId"></param>
            <param name="RelationshipType"></param>
            <param name="Ordinal"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.SaveXml(System.String,System.String,System.String,System.String)">
            <summary>
            Save relationship b/w 2 entities on special relationship type.
            UriTemplate = "xml/Save?objectXId={objectXId}&amp;objectYId={objectYId}&amp;RelationshipType={RelationshipType}&amp;Ordinal={Ordinal}"
            </summary>        
            <param name="objectXId"></param>
            <param name="objectYId"></param>
            <param name="RelationshipType"></param>
            <param name="Ordinal"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.RemoveJson(System.String,System.String,System.String)">
            <summary>
            Remove the relationship b/w X and Y in the special relationship type.
            UriTemplate = "json/Remove?objectXId={objectXId}&amp;objectYId={objectYId}&amp;relationshipType={relationshipType}"
            </summary>        
            <param name="objectXId"></param>
            <param name="objectYId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.RemoveXml(System.String,System.String,System.String)">
            <summary>
            Remove the relationship b/w X and Y in the special relationship type.
            UriTemplate = "xml/Remove?objectXId={objectXId}&amp;objectYId={objectYId}&amp;relationshipType={relationshipType}"
            </summary>        
            <param name="objectXId"></param>
            <param name="objectYId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.GetOneToOneJson(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type. 
            UriTemplate = "json/GetOneToOneJson/{objectId}/{relationshipType}"
            </summary>       
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.GetOneToOneXml(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            UriTemplate = "xml/GetOneToOneJson/{objectId}/{relationshipType}"
            </summary>        
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.GetManyToOneJson(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            UriTemplate = "json/GetManyToOne/{objectId}/{relationshipType}"
            </summary>        
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.GetManyToOneXml(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            UriTemplate = "xml/GetManyToOne/{objectId}/{relationshipType}"
            </summary>        
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.GetOneToManyJson(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            UriTemplate = "json/GetOneToMany/{objectId}/{relationshipType}"
            </summary>        
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.GetOneToManyXml(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            UriTemplate = "xml/GetOneToMany/{objectId}/{relationshipType}"
            </summary>        
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.FindAllRelationshipJson(System.String)">
            <summary>
            Find all objects related to the target object in any special relationship type.
            UriTemplate = "json/FindAllRelationship/{objectId}"
            </summary>        
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRelationshipService.FindAllRelationshipXml(System.String)">
            <summary>
            Find all objects related to the target object in any special relationship type. 
            UriTemplate = "xml/FindAllRelationship/{objectId}"
            </summary>       
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.SaveJson(System.String,System.String,System.String,System.String)">
            <summary>
            Save relationship b/w 2 entities on special relationship type.
            </summary>
            <param name="objectXId"></param>
            <param name="objectYId"></param>      
            <param name="relationshipType"></param>
            <param name="Ordinal"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.RemoveJson(System.String,System.String,System.String)">
            <summary>
            Remove any relationships with specified object.
            </summary>
            <param name="objectXId"></param>
            <param name="objectYId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.GetOneToOneJson(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.GetManyToOneJson(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.GetOneToManyJson(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.FindAllRelationshipJson(System.String)">
            <summary>
            Find all objects related to the target object in any special relationship type.
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.SaveXml(System.String,System.String,System.String,System.String)">
            <summary>
            Save relationship b/w 2 entities on special relationship type.
            </summary>
            <param name="objectXId"></param>
            <param name="objectYId"></param>      
            <param name="relationshipType"></param>
            <param name="Ordinal"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.RemoveXml(System.String,System.String,System.String)">
            <summary>
            Remove any relationships with specified object.
            </summary>
            <param name="objectXId"></param>
            <param name="objectYId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.GetOneToOneXml(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.GetManyToOneXml(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.GetOneToManyXml(System.String,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RelationshipService.FindAllRelationshipXml(System.String)">
            <summary>
            Find all objects related to the target object in any special relationship type.
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.ConcreteDataService">
            <summary>
            The services for concrete data.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.IConcreteDataService">
            <summary>
            The external services for concrete data.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.SaveJson(RapidWebDev.Platform.ConcreteDataObject)">
            <summary>
            Add/update concrete data object depends on whether identity of object is empty or not.<br />
            Uri Template: json/Save
            </summary>
            <param name="concreteDataObject">The name of concrete data should be unique in a concrete data type.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.SaveXml(RapidWebDev.Platform.ConcreteDataObject)">
            <summary>
            Add/update concrete data object depends on whether identity of object is empty or not.<br />
            Uri Template: xml/Save
            </summary>
            <param name="concreteDataObject">The name of concrete data should be unique in a concrete data type.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.GetByIdJson(System.String)">
            <summary>
            Get an non-deleted concrete data by id. <br />
            Uri Template: json/GetById/{concreteDataId}
            </summary>
            <param name="concreteDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.GetByIdXml(System.String)">
            <summary>
            Get an non-deleted concrete data by id. <br />
            Uri Template: xml/GetById/{concreteDataId}
            </summary>
            <param name="concreteDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.GetByNameJson(System.String,System.String)">
            <summary>
            Get an non-deleted concrete data by name.<br />
            Uri Template: json/GetByName/{type}/{name}
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.GetByNameXml(System.String,System.String)">
            <summary>
            Get an non-deleted concrete data by name.<br />
            Uri Template: xml/GetByName/{type}/{name}
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.FindByKeywordJson(System.String,System.String,System.Int32)">
            <summary>
            Find non-deleted concrete data by a keyword which may be included in concrete data name or value.<br />
            Uri Template: json/FindByKeyword?concreteDataType={concreteDataType}&amp;q={query}&amp;limit={limit}
            </summary>
            <param name="concreteDataType">Concrete data type.</param>
            <param name="query">Keyword included in Name or Value. Null or empty value indicates to query all records in the concrete type.</param>
            <param name="limit">Maximum number of returned records.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.FindByKeywordXml(System.String,System.String,System.Int32)">
            <summary>
            Find non-deleted concrete data by a keyword which may be included in concrete data name or value.<br />
            Uri Template: xml/FindByKeyword?concreteDataType={concreteDataType}&amp;q={query}&amp;limit={limit}
            </summary>
            <param name="concreteDataType">Concrete data type.</param>
            <param name="query">Keyword included in Name or Value. Null or empty value indicates to query all records in the concrete type.</param>
            <param name="limit">Maximum number of returned records.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.FindConcreteDataTypesJson">
            <summary>
            Find all available concrete data types.<br />
            Uri Template: json/FindConcreteDataTypes
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.FindConcreteDataTypesXml">
            <summary>
            Find all available concrete data types.<br />
            Uri Template: xml/FindConcreteDataTypes
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.QueryConcreteDataJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find concrete data in all types by custom predicates.<br />
            Uri Template: json/QueryConcreteData?pageindex={pageIndex}&amp;pagesize={pageSize}&amp;orderby={orderby}
            </summary>
            <param name="orderby"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IConcreteDataService.QueryConcreteDataXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find concrete data in all types by custom predicates.<br />
            Uri Template: xml/QueryConcreteData?pageindex={pageIndex}&amp;pagesize={pageSize}&amp;orderby={orderby}
            </summary>
            <param name="orderby"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.SaveJson(RapidWebDev.Platform.ConcreteDataObject)">
            <summary>
            Add/update concrete data object depends on whether identity of object is empty or not.
            </summary>
            <param name="concreteDataObject">The name of concrete data should be unique in a concrete data type.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.SaveXml(RapidWebDev.Platform.ConcreteDataObject)">
            <summary>
            Add/update concrete data object depends on whether identity of object is empty or not.
            </summary>
            <param name="concreteDataObject">The name of concrete data should be unique in a concrete data type.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.GetByIdJson(System.String)">
            <summary>
            Get an non-deleted concrete data by id. 
            </summary>
            <param name="concreteDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.GetByIdXml(System.String)">
            <summary>
            Get an non-deleted concrete data by id. 
            </summary>
            <param name="concreteDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.GetByNameJson(System.String,System.String)">
            <summary>
            Get an non-deleted concrete data by id.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.GetByNameXml(System.String,System.String)">
            <summary>
            Get an non-deleted concrete data by id.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.FindByKeywordJson(System.String,System.String,System.Int32)">
            <summary>
            Find non-deleted concrete data by a keyword which may be included in concrete data name or value.
            </summary>
            <param name="concreteDataType">Concrete data type.</param>
            <param name="query">Keyword included in Name or Value. Null or empty value indicates to query all records in the concrete type.</param>
            <param name="limit">Maximum number of returned records.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.FindByKeywordXml(System.String,System.String,System.Int32)">
            <summary>
            Find non-deleted concrete data by a keyword which may be included in concrete data name or value.
            </summary>
            <param name="concreteDataType">Concrete data type.</param>
            <param name="query">Keyword included in Name or Value. Null or empty value indicates to query all records in the concrete type.</param>
            <param name="limit">Maximum number of returned records.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.FindConcreteDataTypesJson">
            <summary>
            Find all available concrete data types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.FindConcreteDataTypesXml">
            <summary>
            Find all available concrete data types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.QueryConcreteDataJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find concrete data in all types by custom predicates.<br />
            </summary>
            <param name="orderby"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataService.QueryConcreteDataXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find concrete data in all types by custom predicates.
            </summary>
            <param name="orderby"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="predicate"></param>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.RwdSqlMembershipProvider">
            <summary>
            Manages storage of membership information which extends SqlMembershipProvider to support SAAS infrastructure.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.RwdSqlMembershipProvider.ApplicationName">
            <summary>
            Gets or sets the name of the application to store and retrieve membership information for.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.HierarchyDataObject">
            <summary>
            Hierarchy Data Business Object.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.HierarchyDataObject.ToString">
            <summary>
            Returns the value of property "Name".
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.HierarchyDataObject.Clone">
            <summary>
            Get the copy of current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.HierarchyDataObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.HierarchyDataObject.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.HierarchyDataId">
            <summary>
            Hierarchy Data Id
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.HierarchyType">
            <summary>
            Hierarchy Type
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.ParentHierarchyDataId">
            <summary>
            Parent Hierarchy Data Id
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.CreatedBy">
            <summary>
            Created by
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.LastUpdatedBy">
            <summary>
            Last updated by
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HierarchyDataObject.LastUpdatedDate">
            <summary>
            Last updated date
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.DeleteStatus">
            <summary>
            Delete status enumeration.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.DeleteStatus.NotDeleted">
            <summary>
            Not deleted.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.DeleteStatus.Deleted">
            <summary>
            Deleted.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel">
            <summary>
            Organization type detail panel page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.authenticationContext">
            <summary>
            Protected authentication context.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.organizationApi">
            <summary>
            Protected organization Api.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.DropDownListDomain">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.TextBoxName">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.TextBoxDescription">
            <summary />
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.Create">
            <summary>
            Create a new organization type from detail panel and return its id.
            The method needs to create a new entity and set control values to its properties then persist it.
            </summary>
            <returns>returns the id of new created organization type.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.Update(System.String)">
            <summary>
            Update an existed organization type from detail panel.
            The method needs to load an existed entity by specified id and set control values to overwrite its original properties then persist it.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.Reset">
            <summary>
            Reset all controls of the detail panel to initial state.
            The method will be invoked when enables the detail panel to support creating entities continuously.
            After an entity been created, the method will be invoked to reset form controls for another input.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.LoadWritableEntity(System.String)">
            <summary>
            The method is designed to load entity by id to editable detail panel controls.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.OnLoad(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.DetailPanelPageEventArgs)">
            <summary>
            The method will be invoked when detail panel is loaded.
            The implementation can resolve current visiting Page from the conversation as (HttpContext.Current.Handler as Page).
            </summary>
            <param name="sender">The web page which contains the detail panel.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeDetailPanel.ValidateInput(System.Guid)">
            <summary>
            Validate organization type name and domain.
            </summary>
            <param name="organizationTypeId"></param>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowHierarchyDataName">
            <summary>
            Show hierarchy data name by hierarchy data id.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowHierarchyDataName.Format(System.String,System.Object)">
            <summary>
            Format input field value. 
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.PlatformConfiguration">
            <summary>
            The implementation to the interface IInitializationConfiguration which contains the system initialization information.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.PlatformConfiguration.AreaHierarchyTypeValue">
            <summary>
            Sets/gets hierarchy type value of area.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.PlatformConfiguration.OrganizationType">
            <summary>
            Sets/gets default organization type
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.PlatformConfiguration.Organization">
            <summary>
            Sets/gets default organization
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.PlatformConfiguration.Role">
            <summary>
            Sets/gets default role.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.PlatformConfiguration.User">
            <summary>
            Sets/gets default user
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.PlatformConfiguration.Password">
            <summary>
            Sets/gets password of default user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.PlatformConfiguration.PasswordAnswer">
            <summary>
            Sets/gets answer to retrieve password for default user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.PlatformConfiguration.Domains">
            <summary>
            Sets/gets all available organization domains.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.PermissionConst">
            <summary>
            Class of permission const values
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.PermissionConst.EVERYONE">
            <summary>
            EveryOne means all authenticated users.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.PermissionConst.ANONYMOUS">
            <summary>
            Anonymous means all users including unauthenticated users.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.SequenceNoApi">
            <summary>
            The implementation to the interface ISequenceNoApi. 
            An business example is to generate order number in product-order system.
            The class generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.ISequenceNoApi">
            <summary>
            The interface to generate sequence number.
            An business example is to generate order number in product-order system.
            The class generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.ISequenceNoApi.Create(System.String)">
            <summary>
            Create sequence number on specified sequence number type.
            The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.ISequenceNoApi.Create(System.Guid,System.String)">
            <summary>
            Create sequence number on specified type for special object id.
            The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.ISequenceNoApi.Create(System.String,System.UInt16)">
            <summary>
            Create sequence numbers on specified sequence number type.
             The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <param name="sequenceNoCount">Indicates how many sequence number is required.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.ISequenceNoApi.Create(System.Guid,System.String,System.UInt16)">
            <summary>
            Create sequence numbers on specified type for special object id.
             The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <param name="sequenceNoCount">Indicates how many sequence number is required.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.SequenceNoApi.#ctor(RapidWebDev.Platform.IAuthenticationContext)">
            <summary>
            Construct API instance to generate sequence number
            </summary>
            <param name="authenticationContext"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.SequenceNoApi.Create(System.String)">
            <summary>
            Create sequence number on specified type for special object id.
            The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.SequenceNoApi.Create(System.Guid,System.String)">
            <summary>
            Create sequence number on specified type for special object id.
            The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.SequenceNoApi.Create(System.String,System.UInt16)">
            <summary>
            Create sequence numbers on specified sequence number type.
             The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <param name="sequenceNoCount">Indicates how many sequence number is required.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.SequenceNoApi.Create(System.Guid,System.String,System.UInt16)">
            <summary>
            Create sequence numbers on specified type for special object id.
             The method generates the sequence number suppressing transaction scope which means the generated sequence number cannot be rollback.
            </summary>
            <param name="objectId">E.g. we want each company in the system owns standalone sequence number generation. That means company A can have a sequence number 999 as company B has it meanwhile.</param>
            <param name="sequenceNoType">Sequence number type that means a company for above example can has multiple sequence number generation path. E.g. company A has a Order sequence number 999 as it has a Product sequence number 999 meanwhile.</param>
            <param name="sequenceNoCount">Indicates how many sequence number is required.</param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.HierarchyService">
            <summary>
            The service to operate areas
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.SaveJson(RapidWebDev.Platform.HierarchyDataObject)">
            <summary>
            Save a hierarchy data object. 
            </summary>
            <param name="hierarchyDataObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.SaveXml(RapidWebDev.Platform.HierarchyDataObject)">
            <summary>
            Save a hierarchy data object. 
            </summary>
            <param name="hierarchyDataObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetHierarchyDataByIdJson(System.String)">
            <summary>
            Get a hierarchy data object by id. 
            </summary>
            <param name="hierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetHierarchyDataByIdXml(System.String)">
            <summary>
            Get a hierarchy data object by id.
            </summary>
            <param name="hierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetHierarchyDataByNameJson(System.String,System.String)">
            <summary>
            Get a hierarchy data object by name.
            </summary>
            <param name="hierarchyType"></param>
            <param name="hierarchyDataName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetHierarchyDataByNameXml(System.String,System.String)">
            <summary>
            Get a hierarchy data object by name.
            </summary>
            <param name="hierarchyType"></param>
            <param name="hierarchyDataName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetImmediateChildrenJson(System.String,System.String)">
            <summary>
            Get all children of the specified hierarchy data by id.<br/>
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetImmediateChildrenXml(System.String,System.String)">
            <summary>
            Get all children of the specified hierarchy data by id.<br/>
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetAllChildrenJson(System.String,System.String)">
            <summary>
            Get all children of the specified hierarchy data includes not immediately.<br/>
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetAllChildrenXml(System.String,System.String)">
            <summary>
            Get all children of the specified hierarchy data includes not immediately.<br/>
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetAllHierarchyDataJson(System.String)">
            <summary>
            Get all hierarchy data in specified hierarchy type.<br/>
            </summary>
            <param name="hierarchyType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.GetAllHierarchyDataXml(System.String)">
            <summary>
            Get all hierarchy data in specified hierarchy type.<br/>
            </summary>
            <param name="hierarchyType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.HardDeleteHierarchyDataJson(System.String)">
            <summary>
            Hard delete a hierarchy data with all its children by id. <br/>
            </summary>
            <param name="hierarchyDataId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.HardDeleteHierarchyDataXml(System.String)">
            <summary>
            Hard delete a hierarchy data with all its children by id. <br/>
            </summary>
            <param name="hierarchyDataId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.FindByKeywordJson(System.String,System.String,System.Int32)">
            <summary>
            Find all hierarchies which include the query keyword in code or name.
            </summary>
            <param name="hierarchyType"></param>
            <param name="query"></param>
            <param name="maxReturnedCount"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.FindByKeywordXml(System.String,System.String,System.Int32)">
            <summary>
            Find all hierarchies which include the query keyword in code or name.
            </summary>
            <param name="hierarchyType"></param>
            <param name="query"></param>
            <param name="maxReturnedCount"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.QueryHierarchyDataJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query hierarchy data in all types by custom predicates.<br/>
            </summary>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="predicate">linq predicate which supports properties of <see cref="T:RapidWebDev.Platform.HierarchyDataObject"/> for query expression.</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.HierarchyService.QueryHierarchyDataXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query hierarchy data in all types by custom predicates.<br/>
            </summary>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="predicate">linq predicate which supports properties of <see cref="T:RapidWebDev.Platform.HierarchyDataObject"/> for query expression.</param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.SaaS.SaaSWebResourceManager">
            <summary>
            The class renders web resources by Theme configured in SaaS application and Culture setting from the request of client.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.SaaS.SaaSWebResourceManager.#ctor(System.String,RapidWebDev.Platform.IAuthenticationContext,RapidWebDev.Platform.IApplicationApi)">
            <summary>
            Constructor
            </summary>
            <param name="xmlConfigDirectoryPath">The directory stores web resource xml configuration files.</param>
            <param name="authenticationContext">authentication context</param>
            <param name="applicationApi">application Api</param>
        </member>
        <member name="M:RapidWebDev.Platform.SaaS.SaaSWebResourceManager.Flush(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Render the resources in the container by id with filters.
            </summary>
            <param name="resourceId"></param>
            <param name="filters"></param>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowConcreteDataName">
            <summary>
            Show concrete data name by concrete data id.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowConcreteDataName.Format(System.String,System.Object)">
            <summary>
            Format input field value. 
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Web.Controls.PermissionTreeView">
            <summary>
            Permission treeview
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.PermissionTreeView.OnInit(System.EventArgs)">
            <summary>
            Raises the System.Web.UI.Control.Init event.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.PermissionTreeView.OnPreRender(System.EventArgs)">
            <summary>
            Set internal tree view cascading type.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.PermissionTreeView.Text">
            <summary>
            Gets or sets the text content of a control.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.PermissionTreeView.Checkable">
            <summary>
            Sets/gets true to make all checkboxes of tree node checkable.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.PermissionTreeView.CascadingType">
            <summary>
            Tree nodes checking cascading type
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.PermissionTreeView.CheckedValues">
            <summary>
            Checked node values of the treeview.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.Controls.HierarchyTreeView">
            <summary>
            Hierarchy TreeView web control.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.HierarchyTreeView.OnInit(System.EventArgs)">
            <summary>
            Raises the System.Web.UI.Control.Init event.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.HierarchyTreeView.OnLoad(System.EventArgs)">
            <summary>
            Load hierarchy data objects by hierarchy type and bind to treeview.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.HierarchyTreeView.OnPreRender(System.EventArgs)">
            <summary>
            Raises the System.Web.UI.Control.PreRender event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.HierarchyTreeView.Checkable">
            <summary>
            Sets/gets true to make all checkboxes of tree node checkable.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.HierarchyTreeView.CheckedValues">
            <summary>
            Checked node values of the treeview.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.HierarchyTreeView.Text">
            <summary>
            Gets or sets the text content of a control.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.HierarchyTreeView.HierarchyType">
            <summary>
            Hierarchy type
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.CredentialInstaller">
            <summary>
            Installer for default credential of current application.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.IInstaller">
            <summary>
            Interface to initialize application.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.IInstaller.Install(System.String)">
            <summary>
            Install application
            </summary>
            <param name="applicationName">application name to install</param>
            <returns>returns false to skip following installers' execution</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.IInstaller.Uninstall(System.String)">
            <summary>
            Uninstall application
            </summary>
            <param name="applicationName">application name to uninstall</param>
            <returns>returns true when the uninstalling successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.#ctor(RapidWebDev.Platform.IApplicationApi,RapidWebDev.Platform.Initialization.IPlatformConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="applicationApi"></param>
            <param name="platformConfiguration"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.Install(System.String)">
            <summary>
            Install default credential of current application.
            Do nothing if the default credential have existed.
            </summary>
            <param name="applicationName">application name to install</param>
            <returns>returns true when the installing successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.Uninstall(System.String)">
            <summary>
            Uninstall application
            </summary>
            <param name="applicationName">application name to uninstall</param>
            <returns>returns true when the uninstalling successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.NeedToSetupEnvironment(System.Guid)">
            <summary>
            Returns true indicates the installer needs to setup environment.
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.SetupMetadataTypeByDomain(System.Guid)">
            <summary>
            Setup metadata for users and organizations by configured domains.
            </summary>
            <param name="applicationId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.ResolvePlatformConfiguration(System.Guid)">
            <summary>
            Resolve platform configuration.
            </summary>
            <param name="applicationId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.CreateOrganizationType(System.Guid,RapidWebDev.Platform.OrganizationTypeObject)">
            <summary>
            Create organization type into specified application.
            </summary>
            <param name="applicationId"></param>
            <param name="orgType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.GetOrganizationType(System.Guid,System.String)">
            <summary>
            Get organization instance by name.
            </summary>
            <param name="applicationId">application id</param>
            <param name="organizationTypeName">organization type name</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.CreateRole(System.Guid,RapidWebDev.Platform.RoleObject)">
            <summary>
            Create a role into specified application.
            </summary>
            <param name="applicationId"></param>
            <param name="roleObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.SetUserToRoles(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Set the user into the roles.
            </summary>
            <param name="userId"></param>
            <param name="roleIds"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.SetUserPermissions(System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set permissions onto the user.
            </summary>
            <param name="userId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.SetRolePermissions(System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set permissions onto the role.
            </summary>
            <param name="roleId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.CreateOrganization(System.Guid,RapidWebDev.Platform.OrganizationObject,System.Guid)">
            <summary>
            Create an organization into specified application.
            </summary>
            <param name="applicationId"></param>
            <param name="organizationObject"></param>
            <param name="operatedUserId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.CredentialInstaller.SaveUser(System.Guid,RapidWebDev.Platform.UserObject,System.String,System.String)">
            <summary>
            Save user object.
            </summary>
            <param name="applicationId">Application id</param>
            <param name="userObject">user business object</param>
            <param name="password">login password</param>
            <param name="passwordAnswer">password retrieve answer</param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">Save user failed by various reasons implied in exception message.</exception>
            <exception cref="T:System.ArgumentException">The property userObject.Id is specified with an invalid value.</exception>
        </member>
        <member name="T:RapidWebDev.Platform.RelationshipObject">
            <summary>
            Relationship object
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.RelationshipObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.RelationshipObject.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.RelationshipObject.RelationshipType">
            <summary>
            Relationship category
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.RelationshipObject.ReferenceObjectId">
            <summary>
            Reference object id.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.RelationshipObject.Ordinal">
            <summary>
            Reference object ordinal.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.SiteMapApi">
            <summary>
            The implementation is to populate all sitemap configurations for users.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.ISiteMapApi">
            <summary>
            The interface is to populate all sitemap configurations for users.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.ISiteMapApi.FindSiteMapConfig(System.Guid)">
            <summary>
            Returns the sitemap items visible to the user.
            The algorithm is to filter out sitemap items from the sitemap configuration file (or somewhere else) which the user doesn't have the permission. 
            </summary>
            <param name="userId"></param>
            <returns>Returns the sitemap items visible to the user.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.SiteMapApi.#ctor(RapidWebDev.Platform.IAuthenticationContext,RapidWebDev.Platform.IRoleApi,RapidWebDev.Platform.IOrganizationApi,RapidWebDev.Platform.IPermissionApi,RapidWebDev.Platform.Initialization.IPlatformConfiguration,System.String)">
            <summary>
            Construct SiteMapApi instance
            </summary>
            <param name="authenticationContext"></param>
            <param name="roleApi"></param>
            <param name="organizationApi"></param>
            <param name="permissionApi"></param>
            <param name="platformConfiguration"></param>
            <param name="siteMapFilePath"></param>
        </member>
        <member name="M:RapidWebDev.Platform.SiteMapApi.FindSiteMapConfig(System.Guid)">
            <summary>
            Returns all sitemap item configurations accessible to specified user.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.SiteMapApi.FilterSiteMapItemsByUserPermission(System.Collections.Generic.IEnumerable{RapidWebDev.Platform.SiteMapItemConfig},System.Guid)">
            <summary>
            Filter all sitemap item configs not included in specified user permissions.
            </summary>
            <param name="siteMapItemConfigEnumerable"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.SiteMapApi.HasPermission(System.Guid,RapidWebDev.Platform.SiteMapItemConfig)">
            <summary>
            Check the user whether has the permission to the sitemap item.
            </summary>
            <param name="userId"></param>
            <param name="siteMapItem"></param>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapApi.AllSiteMapItemConfigs">
            <summary>
            Gets all sitemap item configurations existed in system.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.OrganizationPermissionTypes">
            <summary>
            Organization permission types.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.OrganizationPermissionTypes.View">
            <summary>
            Whether the user has permission to view the organization.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.OrganizationPermissionTypes.Manage">
            <summary>
            Whether the user has permission to manage the organization.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.HierarchyApi">
            <summary>
            The hierarchy API is used for CRUD generic data within hierarchy using linq-2-sql.
            The common business scenario likes Geography that each area in geography potentially has a parent and multiple children.
            The example likes the managed geography can be selected as shipping destination city when the user creates a order for shipping in product-order system.
            In this case we don't need to design the database schema and create API to CRUD areas in geography any more with Hierarchy model provided in the RapidWebDev. 
            We can use IHierarchyApi to CRUD any hierarchy data generally. 
            The hierarchy data object focused in the IHierarchyApi includes basic information likes Code, Name, Description, HierarchyType and it integrates the extension model provided in RapidWebDev. 
            The property HierarchyType is used to categorize the hierarchy data which provides the capacity to manage multiple hierarchy objects in a system at a time, likes Geography, Functional Zone.
            With extension model integrated into Hierarchy, we can define the dynamic properties for hierarchy data based on the needs of business. 
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.IHierarchyApi">
            <summary>
            The hierarchy API is used for CRUD generic data within hierarchy.
            The common business scenario likes Geography that each area in geography potentially has a parent and multiple children.
            The example likes the managed geography can be selected as shipping destination city when the user creates a order for shipping in product-order system.
            In this case we don't need to design the database schema and create API to CRUD areas in geography any more with Hierarchy model provided in the RapidWebDev. 
            We can use IHierarchyApi to CRUD any hierarchy data generally. 
            The hierarchy data object focused in the IHierarchyApi includes basic information likes Code, Name, Description, HierarchyType and it integrates the extension model provided in RapidWebDev. 
            The property HierarchyType is used to categorize the hierarchy data which provides the capacity to manage multiple hierarchy objects in a system at a time, likes Geography, Functional Zone.
            With extension model integrated into Hierarchy, we can define the dynamic properties for hierarchy data based on the needs of business. 
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IHierarchyApi.Save(RapidWebDev.Platform.HierarchyDataObject)">
            <summary>
            Save a hierarchy data object.
            </summary>
            <param name="hierarchyDataObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IHierarchyApi.GetHierarchyData(System.Guid)">
            <summary>
            Get a hierarchy data object by id.
            </summary>
            <param name="hierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IHierarchyApi.GetHierarchyData(System.String,System.String)">
            <summary>
            Get a hierarchy data object by name.
            </summary>
            <param name="hierarchyType"></param>
            <param name="hierarchyDataName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IHierarchyApi.GetImmediateChildren(System.String,System.Nullable{System.Guid})">
            <summary>
            Get all children of the specified hierarchy data.
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IHierarchyApi.GetAllChildren(System.String,System.Nullable{System.Guid})">
            <summary>
            Get all children of the specified hierarchy data includes not immediately.
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IHierarchyApi.GetAllHierarchyData(System.String)">
            <summary>
            Get all hierarchy data in specified hierarchy type.
            </summary>
            <param name="hierarchyType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IHierarchyApi.HardDeleteHierarchyData(System.Guid)">
            <summary>
            Hard delete a hierarchy data with all its children by id. 
            </summary>
            <param name="hierarchyDataId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IHierarchyApi.FindHierarchyData(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find hierarchy data in all types by custom predicates.
            </summary>
            <param name="predicate">linq predicate which supports properties of <see cref="T:RapidWebDev.Platform.HierarchyDataObject"/> for query expression.</param>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="recordCount">total hit records count</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.HierarchyApi.#ctor(RapidWebDev.Platform.IAuthenticationContext)">
            <summary>
            Construct HierarchyApi
            </summary>
            <param name="authenticationContext"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.HierarchyApi.Save(RapidWebDev.Platform.HierarchyDataObject)">
            <summary>
            Save a hierarchy data object.
            </summary>
            <param name="hierarchyDataObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.HierarchyApi.GetHierarchyData(System.Guid)">
            <summary>
            Get a hierarchy data object by id.
            </summary>
            <param name="hierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.HierarchyApi.GetHierarchyData(System.String,System.String)">
            <summary>
            Get a hierarchy data object by name.
            </summary>
            <param name="hierarchyType"></param>
            <param name="hierarchyDataName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.HierarchyApi.GetImmediateChildren(System.String,System.Nullable{System.Guid})">
            <summary>
            Get all children of the specified hierarchy data.
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.HierarchyApi.GetAllChildren(System.String,System.Nullable{System.Guid})">
            <summary>
            Get all children of the specified hierarchy data includes not immediately.
            </summary>
            <param name="hierarchyType"></param>
            <param name="parentHierarchyDataId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.HierarchyApi.GetAllHierarchyData(System.String)">
            <summary>
            Get all hierarchy data in specified hierarchy type.
            </summary>
            <param name="hierarchyType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.HierarchyApi.HardDeleteHierarchyData(System.Guid)">
            <summary>
            Delete a hierarchy data with all its children by id. 
            </summary>
            <param name="hierarchyDataId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.HierarchyApi.FindHierarchyData(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find hierarchy data in all types by custom predicates.
            </summary>
            <param name="predicate">linq predicate which supports properties of <see cref="T:RapidWebDev.Platform.HierarchyDataObject"/> for query expression.</param>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="recordCount">total hit records count</param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel">
            <summary>
            User detail panel page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.authenticationContext">
            <summary>
            Protected authentication context
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.membershipApi">
            <summary>
            Protected membership Api
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.platformConfiguration">
            <summary>
            Protected platform configuration
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.roleApi">
            <summary>
            Protected role Api
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.permissionApi">
            <summary>
            Protected permission Api
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.organizationApi">
            <summary>
            Protected organization Api
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.metadataApi">
            <summary>
            Protected metadata Api
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.OrganizationSelector">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxUserName">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.PlaceHolderPassword">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxPassword">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxConfirmPassword">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxDisplayName">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxEmail">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxMobile">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.UserExtensionDataForm">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxComment">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.RadioButtonListStatus">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.PlaceHolderOperateContext">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxCreationDate">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxLastLoginDate">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxLastActivityDate">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxLockedOutDate">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxLastPasswordChangedDate">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TextBoxLastUpdatedDate">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.PanelRoleContainer">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.PermissionTreeView">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TabPanelProfile">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.TabPanelPermission">
            <summary />
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.Create">
            <summary>
            Create a new user from detail panel and return the id.
            The method needs to create a new entity and set control values to its properties then persist it.
            </summary>
            <returns>returns the user id after it's created successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.Update(System.String)">
            <summary>
            Update an existed organization type from detail panel.
            The method needs to load an existed entity by specified id and set control values to overwrite its original properties then persist it.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.Reset">
            <summary>
            Reset all controls of the detail panel to initial state.
            The method will be invoked when enables the detail panel to support creating entities continuously.
            After an entity been created, the method will be invoked to reset form controls for another input.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.LoadWritableEntity(System.String)">
            <summary>
            The method is designed to load entity by id to editable detail panel controls.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.LoadReadOnlyEntity(System.String)">
            <summary>
            The method is designed to load entity by id to readonly detail panel controls.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.OnLoad(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.DetailPanelPageEventArgs)">
            <summary>
            The method will be invoked when detail panel is loaded.
            The implementation can resolve current visiting Page from the conversation as (HttpContext.Current.Handler as Page).
            </summary>
            <param name="sender">The web page which contains the detail panel.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.ResolveUserExtensionDataTypeId">
            <summary>
            Resolve user extension data type id by default xml configured metadata type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.SetUserPropertiesFromControls(RapidWebDev.Platform.UserObject)">
            <summary>
            Set controls from user fixed properties, e.g. UserName, DisplayName, Email, Comment, IsApproved, Mobile and OrganizationId.
            </summary>
            <param name="userObject"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.ValidateDataInputForm(System.Nullable{System.Guid})">
            <summary>
            Validate data input from client.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="P:RapidWebDev.Platform.Web.DynamicPage.UserDetailPanel.Domain">
            <summary>
            Gets organization domain
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.RoleDetailPanel">
            <summary>
            Role detail panel page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.RoleDetailPanel.TextBoxName">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.RoleDetailPanel.TextBoxDescription">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.RoleDetailPanel.PermissionTreeView">
            <summary />
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.RoleDetailPanel.Create">
            <summary>
            Create a new role from detail panel and return the id.
            The method needs to create a new entity and set control values to its properties then persist it.
            </summary>
            <returns>returns the id of new created role.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.RoleDetailPanel.Update(System.String)">
            <summary>
            Update an existed organization type from detail panel.
            The method needs to load an existed entity by specified id and set control values to overwrite its original properties then persist it.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.RoleDetailPanel.Reset">
            <summary>
            Reset all controls of the detail panel to initial state.
            The method will be invoked when enables the detail panel to support creating entities continuously.
            After an entity been created, the method will be invoked to reset form controls for another input.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.RoleDetailPanel.LoadWritableEntity(System.String)">
            <summary>
            The method is designed to load entity by id to editable detail panel controls.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.RoleDetailPanel.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="T:RapidWebDev.Platform.Web.Controls.OrganizationLink">
            <summary>
            HyperLink to Organization Profile page.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.OrganizationLink.OnPreRender(System.EventArgs)">
            <summary>
            Raises the System.Web.UI.Control.PreRender event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.Controls.OrganizationLink.BuildOrganizationLink(System.String)">
            <summary>
            Build HTML fragment which contains a link to organization profile page.
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.Web.Controls.OrganizationLink.OrganizationId">
            <summary>
            Sets/gets organization id.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.RoleObject">
            <summary>
            Role element.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.RoleObject.ToString">
            <summary>
            Display roleElement as role name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.RoleObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.RoleObject.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.RoleObject.Clone">
            <summary>
            Get the copy of current object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.RoleObject.RoleId">
            <summary>
            Sets/gets role id.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.RoleObject.RoleName">
            <summary>
            Sets/gets role name.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.RoleObject.Description">
            <summary>
            Sets/gets role description
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.RoleObject.Domain">
            <summary>
            Sets/gets domain which the role belongs to.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.RoleObject.Predefined">
            <summary>
            Sets/gets true if role is predefined.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.MembershipApi">
            <summary>
            RapidWebDev Membership gives you a built-in way to validate and store user credentials which developed on ASP.NET Membership.
            The membership therefore helps you manage user authentication in your Web sites. 
            With extended from ASP.NET membership, you can configure the membership by ASP.NET Membreship Configuration as seeing the topic "Configuring an ASP.NET Application to Use Membership" in MSDN.
            The RapidWebDev membership model is NOT compatible to ASP.NET Membership Controls like Login Control, PasswordRecovery Control.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.IMembershipApi">
            <summary>
            RapidWebDev Membership gives you a built-in way to validate and store user credentials which developed on ASP.NET Membership.
            The membership therefore helps you manage user authentication in your Web sites. 
            With extended from ASP.NET membership, you can configure the membership by ASP.NET Membreship Configuration as seeing the topic "Configuring an ASP.NET Application to Use Membership" in MSDN.
            The RapidWebDev membership model is NOT compatible to ASP.NET Membership Controls like Login Control, PasswordRecovery Control.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.Save(RapidWebDev.Platform.UserObject,System.String,System.String)">
            <summary>
            Save user object with specified password and password retrieval answer. 
            If it's used to update an existed user, the password allows to be null in the case that it doesn't need to change the password of the user.
            The argument "passwordAnswer" is to be validated depends on the configuration on ASP.NET Membership "RequiresQuestionAndAnswer".
            </summary>
            <param name="userObject">user business object</param>
            <param name="password">login password. If it's used to update an existed user, the password allows to be null in the case that it doesn't need to change the password of the user.</param>
            <param name="passwordAnswer">password retrieve answer. The argument "passwordAnswer" is to be validated depends on the configuration on ASP.NET Membership "RequiresQuestionAndAnswer".</param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">Save user failed by various reasons implied in exception message.</exception>
            <exception cref="T:System.ArgumentException">The property userObject.Id is specified with an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">The argument userObject is null.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.BulkGet(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Resolve user objects from enumerable user ids.
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.BulkGet``1(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Resolve user objects from enumerable user ids.
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.Get(System.String)">
            <summary>
            Get user by user name.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.Get(System.Guid)">
            <summary>
            Get user object by user id.
            </summary>
            <param name="userId">user id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.Login(System.String,System.String)">
            <summary>
            Validate user is authenticated to application. 
            Either invalid credential or unauthenticated company will lead to login failed.
            </summary>
            <param name="username">user name</param>
            <param name="password">password</param>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.Logout(System.Guid)">
            <summary>
            Logout the user by id.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.Act(System.Guid)">
            <summary>
            Track the user activities online.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.ChangePassword(System.Guid,System.String,System.String)">
            <summary>
            Change password of specified user. 
            </summary>
            <param name="userId"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns>returns true if operation successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.IMembershipApi.FindUsers(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find user business objects by custom predicates.
            </summary>
            <param name="predicate">linq predicate. see user properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.User"/>.</param>
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="recordCount">total hit records count</param>
            <returns>Returns enumerable user objects</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.#ctor(RapidWebDev.Platform.IAuthenticationContext,RapidWebDev.Platform.IOrganizationApi)">
            <summary>
            Construct membership API instance.
            </summary>
            <param name="authenticationContext"></param>
            <param name="organizationApi"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.Save(RapidWebDev.Platform.UserObject,System.String,System.String)">
            <summary>
            Save user object with specified password and password retrieval answer. 
            If it's used to update an existed user, the password allows to be null in the case that it doesn't need to change the password of the user.
            The argument "passwordAnswer" is to be validated depends on the configuration on ASP.NET Membership "RequiresQuestionAndAnswer".
            </summary>
            <param name="userObject">user business object</param>
            <param name="password">login password. If it's used to update an existed user, the password allows to be null in the case that it doesn't need to change the password of the user.</param>
            <param name="passwordAnswer">password retrieve answer. The argument "passwordAnswer" is to be validated depends on the configuration on ASP.NET Membership "RequiresQuestionAndAnswer".</param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">Save user failed by various reasons implied in exception message.</exception>
            <exception cref="T:System.ArgumentException">The property userObject.Id is specified with an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">The argument userObject is null.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.BulkGet(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Resolve user elements from enumerable user ids.
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.BulkGet``1(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Resolve user objects from enumerable user ids.
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.Get(System.String)">
            <summary>
            Get user by user name.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.Get(System.Guid)">
            <summary>
            Get user object by user id.
            </summary>
            <param name="userId">user id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.Login(System.String,System.String)">
            <summary>
            Validate user is authenticated to application. Both invalid credential and unauthenticated organizations will be failed logon.
            </summary>
            <param name="username">user name</param>
            <param name="password">password</param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.Logout(System.Guid)">
            <summary>
            Logout the user by id.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.Act(System.Guid)">
            <summary>
            Track the user activities online.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.ChangePassword(System.Guid,System.String,System.String)">
            <summary>
            Change password of specified user. 
            </summary>
            <param name="userId"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <returns>returns true if operation successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.MembershipApi.FindUsers(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find user business objects by custom predicates.
            </summary>
            <param name="predicate">linq predicate. see user properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.User"/>.</param>
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="recordCount">total hit records count</param>
            <returns>Returns enumerable user objects</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.ApplicationApi">
            <summary>
            The implementation of operating application
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ApplicationApi.Save(RapidWebDev.Platform.ApplicationObject)">
            <summary>
            Save application. Empty application id of application object means that the specified application object is new created. 
            And after it's inserted into database, the database generated id will be set back to property id.
            Non-empty application id means to update an existed application. 
            If the non-empty application id is not available in database, it throws exception ValidationException.
            </summary>
            <param name="applicationObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">If the non-empty application id is not available in database, it throws exception ValidationException.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ApplicationApi.Get(System.Guid)">
            <summary>
            Get application biz object by id. Returns null if the application id is invalid.
            </summary>
            <param name="applicationId"></param>
            <returns>returns null if the application id is invalid.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ApplicationApi.Get(System.String)">
            <summary>
            Get application biz object by name with ignoring character case. Returns null if the application id is invalid.
            </summary>
            <param name="applicationName"></param>
            <returns>Returns null if the application name is invalid.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ApplicationApi.Exists(System.String)">
            <summary>
            Returns true if specified application name exists with ignoring character case.
            </summary>
            <param name="applicationName"></param>
            <returns>Returns true if specified application name exists.</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.IRoleService">
            <summary>
            The service to search roles
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.SaveJson(RapidWebDev.Platform.RoleObject)">
            <summary>
            Save role business object. 
            It does create/update based on roleObject.Id. If id is empty, the method will create a new role object.
            If the specified id is invalid, the method will throw an exception.
            Uri Template: json/Save
            </summary>
            <param name="roleObject">role object</param>
            <returns>returns id of the accessing role.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.SaveXml(RapidWebDev.Platform.RoleObject)">
            <summary>
            Save role business object. 
            It does create/update based on roleObject.Id. If id is empty, the method will create a new role object.
            If the specified id is invalid, the method will throw an exception.
            Uri Template: xml/Save
            </summary>
            <param name="roleObject">role object</param>
            <returns>returns id of the accessing role.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.HardDeleteJson(System.String)">
            <summary>
            Delete role by id.
            Uri Template: json/HardDelete/{roleId}
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.HardDeleteXml(System.String)">
            <summary>
            Delete role by id.
            Uri Template: xml/HardDelete/{roleId}
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.SetUserToRolesJson(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set user into roles which overwrites all existed roles of user.
            Uri Template: json/SetUserToRoles/{userId}
            </summary>
            <param name="userId"></param>
            <param name="roleIds"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.SetUserToRolesXml(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set user into roles which overwrites all existed roles of user.
            Uri Template: xml/SetUserToRoles/{userId}
            </summary>
            <param name="userId"></param>
            <param name="roleIds"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.GetByNameJson(System.String)">
            <summary>
            Get role by role name.
            Uri Template: json/GetByName/{roleName}
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.GetByNameXml(System.String)">
            <summary>
            Get role by role name.
            Uri Template: xml/GetByName/{roleName}
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.GetByIdJson(System.String)">
            <summary>
            Get role by role id.
            Uri Template: json/GetById/{roleId}
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.GetByIdXml(System.String)">
            <summary>
            Get role by role id.
            Uri Template: xml/GetById/{roleId}
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.BulkGetJson(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Bulkget role objects by a collection of role ids.
            Uri Template: json/BulkGet
            </summary>
            <param name="roleIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.BulkGetXml(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Bulkget role objects by a collection of role ids.
            Uri Template: xml/BulkGet
            </summary>
            <param name="roleIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindAllJson">
            <summary>
            Find all available roles.
            Uri Template: json/FindAll
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindAllXml">
            <summary>
            Find all available roles.
            Uri Template: xml/FindAll
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindByOrganizationIdJson(System.String)">
            <summary>
            Get all roles associated to the specified organization.
            Uri Template: json/FindByOrganizationId/{organizationId}
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindByOrganizationIdXml(System.String)">
            <summary>
            Get all roles associated to the specified organization.
            Uri Template: xml/FindByOrganizationId/{organizationId}
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindByUserIdJson(System.String)">
            <summary>
            Find all roles of specified user.
            Uri Template: json/FindByUserId/{userId}
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindByUserIdXml(System.String)">
            <summary>
            Find all roles of specified user.
            Uri Template: xml/FindByUserId/{userId}
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindByOrganizationTypeJson(System.String)">
            <summary>
            Find roles by organization type id.
            Uri Template: json/FindByOrganizationType/{organizationTypeId}
            </summary>
            <param name="organizationTypeId">organization type id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindByOrganizationTypeXml(System.String)">
            <summary>
            Find roles by organization type id.
            Uri Template: xml/FindByOrganizationType/{organizationTypeId}
            </summary>
            <param name="organizationTypeId">organization type id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindByDomainJson(System.String)">
            <summary>
            Find roles by domain
            Uri Template: json/FindByDomain/{domain}
            </summary>
            <param name="domain">domain</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.FindByDomainXml(System.String)">
            <summary>
            Find roles by domain
            Uri Template: xml/FindByDomain/{domain}
            </summary>
            <param name="domain">domain</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.IsUserInRoleByIdJson(System.String,System.String)">
            <summary>
            Gets true if specified user is in role.
            Uri Template: json/IsUserInRoleById/{userId}/{roleId}
            </summary>
            <param name="userId"></param>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.IsUserInRoleByIdXml(System.String,System.String)">
            <summary>
            Gets true if specified user is in role.
            Uri Template: xml/IsUserInRoleById/{userId}/{roleId}
            </summary>
            <param name="userId"></param>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.IsUserInRoleByNameJson(System.String,System.String)">
            <summary>
            Gets true if specified user is in role.
            Uri Template: json/IsUserInRoleByName/{userId}/{roleName}
            </summary>
            <param name="userId"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.IsUserInRoleByNameXml(System.String,System.String)">
            <summary>
            Gets true if specified user is in role.
            Uri Template: xml/IsUserInRoleByName/{userId}/{roleName}
            </summary>
            <param name="userId"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.QueryRolesJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find role objects by custom predicates.
            Uri Template: json/QueryRoles?pageindex={pageIndex}&amp;pagesize={pageSize}&amp;orderby={orderby}
            </summary>
            <param name="orderby">sorting expression</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="predicate">linq predicate. see role properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Role"/>.</param>
            <returns>Returns enumerable role objects</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IRoleService.QueryRolesXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find role objects by custom predicates.
            Uri Template: xml/QueryRoles?pageindex={pageIndex}&amp;pagesize={pageSize}&amp;orderby={orderby}
            </summary>
            <param name="orderby">sorting expression</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="predicate">linq predicate. see role properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Role"/>.</param>
            <returns>Returns enumerable role objects</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.RoleQueryResult">
            <summary>
            Role data query result
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleQueryResult.#ctor(System.Collections.Generic.IList{RapidWebDev.Platform.RoleObject})">
            <summary>
            Constructor
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleQueryResult.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.RoleQueryResult.PageIndex">
            <summary>
            Page index which starts from 0.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.RoleQueryResult.PageSize">
            <summary>
            Page size.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.RoleQueryResult.TotalRecordCount">
            <summary>
            Total record count.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.OrganizationDomainObject">
            <summary>
            Organization domain
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationDomainObject.Value">
            <summary>
            Sets/gets domain unique value
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationDomainObject.Text">
            <summary>
            Sets/gets domain display text.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.IPermissionConfigurationReader">
            <summary>
            Api to read permission configuration.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IPermissionConfigurationReader.Read">
            <summary>
            Read permission configuration document.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.SaaSClientTimeZoneLoader">
            <summary>
            The implementation to get the timezone of the client.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.SaaSClientTimeZoneLoader.#ctor(RapidWebDev.Platform.IAuthenticationContext,RapidWebDev.Platform.IApplicationApi)">
            <summary>
            Constructor
            </summary>
            <param name="authenticationContext"></param>
            <param name="applicationApi"></param>
        </member>
        <member name="M:RapidWebDev.Platform.SaaSClientTimeZoneLoader.Load">
            <summary>
            Load timezone of the client.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeManagement">
            <summary>
            Organization type management dynamic page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeManagement.authenticationContext">
            <summary>
            Protected authentication context.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeManagement.organizationApi">
            <summary>
            Protected organization Api.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeManagement.Query(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Execute query for results binding to dynamic page grid.
            </summary>
            <param name="parameter">Query parameter.</param>
            <returns>Returns query results.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeManagement.Delete(System.String)">
            <summary>
            Delete orgianization type by id.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeManagement.OnGridRowControlsBind(RapidWebDev.UI.DynamicPages.GridRowControlBindEventArgs)">
            <summary>
            Predefined organization type cannot be edited and deleted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationTypeManagement.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel">
            <summary>
            Detail panel class for organization.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.hierarchyApi">
            <summary>
            Protected hierarchy Api.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.organizationApi">
            <summary>
            Protected organization Api.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.authenticationContext">
            <summary>
            Protected authentication context.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.platformConfiguration">
            <summary>
            Protected platform configuration.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.metadataApi">
            <summary>
            Protected metadata Api
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.AssociatedAreaSelector">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.TextBoxOrganizationCode">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.TextBoxOrganizationName">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.ParentOrganizationSelector">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.DropDownListOrganizationType">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.RadioButtonListOrganizationStatus">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.OrganizationExtensionDataForm">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.TextBoxDescription">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.PlaceHolderOperatorContext">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.UserLinkCreatedBy">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.TextBoxCreatedOn">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.UserLinkLastModifiedBy">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.TextBoxLastModifiedOn">
            <summary />
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.OnLoad(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.DetailPanelPageEventArgs)">
            <summary>
            Load organization types when the web page loaded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.Create">
            <summary>
            Create a new organization and return the id.
            </summary>
            <returns>returns the id of new created organization.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.Update(System.String)">
            <summary>
            Update an existed organization.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.Reset">
            <summary>
            Reset organization form for continuously adding.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.LoadWritableEntity(System.String)">
            <summary>
            Load organization into the form in writable mode.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.LoadReadOnlyEntity(System.String)">
            <summary>
            Load organization into the form in readonly mode.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.ResolveOrganizationExtensionDataTypeId">
            <summary>
            Resolve organization extension data type id by default xml configured metadata type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.SetOrgPropertiesFromControls(RapidWebDev.Platform.OrganizationObject)">
            <summary>
            Set organization properties from controls for saving the organization.
            </summary>
            <param name="org"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.SetControlsFromOrgProperties(RapidWebDev.Platform.OrganizationObject)">
            <summary>
            Set controls from organization properties for UI displaying.
            </summary>
            <param name="org"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.ValidateDataInputForm(System.Nullable{System.Guid})">
            <summary>
            Validate whether the organization code, name and type are filled by the user correctly.
            Both the organization code and name should be unique in the application.
            </summary>
            <param name="organizationId"></param>
        </member>
        <member name="P:RapidWebDev.Platform.Web.DynamicPage.OrganizationDetailPanel.Domain">
            <summary>
            Gets organization domain
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.HttpAuthenticationContext">
            <summary>
            Authentication context HTTP implementation class.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.IAuthenticationContext">
            <summary>
            Authentication context interface.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IAuthenticationContext.Login(System.String,System.String)">
            <summary>
            Login with user name and password.
            </summary>
            <param name="username">user name</param>
            <param name="password">password</param>
            <returns>returns status of login</returns>
        </member>
        <member name="M:RapidWebDev.Platform.IAuthenticationContext.Logout">
            <summary>
            Logout the current user.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IAuthenticationContext.Act">
            <summary>
            Track the user interaction.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.IAuthenticationContext.Organization">
            <summary>
            Get organization the current login user belongs to.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.IAuthenticationContext.User">
            <summary>
            Get current login user.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.HttpAuthenticationContext.#ctor(RapidWebDev.Platform.IApplicationApi)">
            <summary>
            Http authentication context instance
            </summary>
            <param name="applicationApi"></param>
        </member>
        <member name="M:RapidWebDev.Platform.HttpAuthenticationContext.Login(System.String,System.String)">
            <summary>
            Login with user name and password.
            </summary>
            <param name="username">user name</param>
            <param name="password">password</param>
            <returns>returns status of login</returns>
        </member>
        <member name="M:RapidWebDev.Platform.HttpAuthenticationContext.Logout">
            <summary>
            Logout the current user.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.HttpAuthenticationContext.Act">
            <summary>
            Track the user interaction for every 30 seconds.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HttpAuthenticationContext.MembershipApi">
            <summary>
            Gets/sets membership API
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HttpAuthenticationContext.OrganizationApi">
            <summary>
            Sets/gets organization API
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HttpAuthenticationContext.ApplicationId">
            <summary>
            Get current running application id.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HttpAuthenticationContext.Identity">
            <summary>
            Get current authenticated identity instance.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HttpAuthenticationContext.ClientIPAddress">
            <summary>
            Get the client IP address.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HttpAuthenticationContext.Organization">
            <summary>
            Get organization the current login user belongs to.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HttpAuthenticationContext.User">
            <summary>
            Get current login user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.HttpAuthenticationContext.Session">
            <summary>
            Set/get context value by name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.HttpAuthenticationContext.TempVariables">
            <summary>
            Gets variables for current request context which can also be used to format variable markers in display labels like $VariableName$.
            It likes HttpContext.Current.Items, the variables stored will be disposed after a request is completed so that developers can share variables in a request.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.PermissionConfigs">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionConfigs.Domain">
            <remarks/>
        </member>
        <member name="T:RapidWebDev.Platform.PermissionDomain">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionDomain.Permission">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionDomain.Value">
            <remarks/>
        </member>
        <member name="T:RapidWebDev.Platform.PermissionConfig">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionConfig.ImplicitPermission">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionConfig.Permission">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionConfig.Value">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.PermissionConfig.Text">
            <remarks/>
        </member>
        <member name="T:RapidWebDev.Platform.ImplicitPermissionConfig">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.ImplicitPermissionConfig.Value">
            <remarks/>
        </member>
        <member name="T:RapidWebDev.Platform.PlatformModule">
            <summary>
            HttpModule used to install application at first running web application based on the platform component.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.PlatformModule.System#Web#IHttpModule#Dispose">
            <summary>
            Dispose current instance
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.PlatformModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>
            initialize http module
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:RapidWebDev.Platform.Services.RapidWebServiceAuthorizationManager">
            <summary>
            This class provide authenicate when new request which call external Api coming
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Services.RapidWebServiceAuthorizationManager.securityKey">
            <summary>
            Authorization
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RapidWebServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)">
            <summary>
            Check if there are users logon already
            if not, check if the request header contains the info about authentication
            </summary>
            <param name="operationContext"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.ConcreteDataApi">
            <summary>
            The concrete data API is used for CRUD constant values implemented in linq-2-sql.
            The method executed add/update depends on whether identity of object is empty or not.
            Take an example to explain the business value of concrete data API.
            In a product-order system, the product may have many properties which have candidate property values for users to select.
            The product may have Size property with three candidate values "Big", "Medium" and "Small" and Color property with 2 candidate values "Light" and "Dark".
            Then we can categorize that there are 3 concrete data objects "Big", "Medium" and "Small" in concrete data type "Size" as 2 concrete data objects "Light" and "Dark" in concrete data type "Color" in concrete model provided in RapidWebDev.
            Generally, with Concrete Data Model, we have avoided to design database schema and implement data access API to CRUD constant values.
            And With extension model integrated into concrete data model, we can define the dynamic properties for concrete data based on the needs of business. 
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.IConcreteDataApi">
            <summary>
            The concrete data API is used for CRUD constant values.
            The method executed add/update depends on whether identity of object is empty or not.
            Take an example to explain the business value of concrete data API.
            In a product-order system, the product may have many properties which have candidate property values for users to select.
            The product may have Size property with three candidate values "Big", "Medium" and "Small" and Color property with 2 candidate values "Light" and "Dark".
            Then we can categorize that there are 3 concrete data objects "Big", "Medium" and "Small" in concrete data type "Size" as 2 concrete data objects "Light" and "Dark" in concrete data type "Color" in concrete model provided in RapidWebDev.
            Generally, with Concrete Data Model, we have avoided to design database schema and implement data access API to CRUD constant values.
            And With extension model integrated into concrete data model, we can define the dynamic properties for concrete data based on the needs of business. 
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IConcreteDataApi.Save(RapidWebDev.Platform.ConcreteDataObject)">
            <summary>
            The method executed add/update depends on whether identity of object is empty or not.
            </summary>
            <param name="concreteDataObject">The name of concrete data should be unique in a concrete data type.</param>
        </member>
        <member name="M:RapidWebDev.Platform.IConcreteDataApi.GetById(System.Guid)">
            <summary>
            Get concrete data by id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IConcreteDataApi.GetByName(System.String,System.String)">
            <summary>
            Get concrete data by name.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IConcreteDataApi.FindAllByType(System.String)">
            <summary>
            Find all concrete data objects includes soft deleted in the special type sorted by Name ascendingly.
            </summary>
            <param name="type">valid concrete data type</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IConcreteDataApi.FindConcreteDataTypes">
            <summary>
            Find all available concrete data types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IConcreteDataApi.FindConcreteData(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find concrete data in all types by custom predicates.
            </summary>
            <param name="predicate"></param>
            <param name="orderby"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="recordCount"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ConcreteDataApi.#ctor(RapidWebDev.Platform.IAuthenticationContext)">
            <summary>
            Construct ConcreteDataApi
            </summary>
            <param name="authenticationContext"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ConcreteDataApi.Save(RapidWebDev.Platform.ConcreteDataObject)">
            <summary>
            The method executed add/update depends on whether identity of object is empty or not.
            </summary>
            <param name="concreteDataObject">The name of concrete data should be unique in a concrete data type.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ConcreteDataApi.GetById(System.Guid)">
            <summary>
            Get concrete data by id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ConcreteDataApi.GetByName(System.String,System.String)">
            <summary>
            Get concrete data by name.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ConcreteDataApi.FindAllByType(System.String)">
            <summary>
            Find all concrete data objects includes soft deleted in the special type sorted by Name ascendingly.
            </summary>
            <param name="type">valid concrete data type</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ConcreteDataApi.FindConcreteDataTypes">
            <summary>
            Find all available concrete data types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.ConcreteDataApi.FindConcreteData(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find concrete data in all types by custom predicates.
            </summary>
            <param name="predicate"></param>
            <param name="orderby"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="recordCount"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.DefaultApplicationNameRouter">
            <summary>
            Default application name loader
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.DefaultApplicationNameRouter.GetApplicationName">
            <summary>
            Get application name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.DefaultApplicationNameRouter.Mapping">
            <summary>
            Get application mapping dictionary. 
            The key is HttpContext.Current.Request.Url.Authority and value is application name.
            If application name is not configured, returns HttpContext.Current.Request.Url.Authority.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.DefaultApplicationNameRouter.AllowsAnonymousUriAuthority">
            <summary>
            True to allow request on Uri authority which is not configured in the property Mapping.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.SaaS.SaaSFramePageLayout">
            <summary>
            The implementation to render layout of the frame page as (header), (navigation bar) at top, (working area) at center and (footer) at bottom.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.SaaS.SaaSFramePageLayout.#ctor(RapidWebDev.Platform.IAuthenticationContext,RapidWebDev.Platform.IApplicationApi)">
            <summary>
            Constructor
            </summary>
            <param name="authenticationContext"></param>
            <param name="applicationApi"></param>
        </member>
        <member name="M:RapidWebDev.Platform.SaaS.SaaSFramePageLayout.CreateControl(RapidWebDev.UI.DynamicPages.Configurations.FramePageConfigurationSection,System.Web.UI.WebControls.Panel,System.Web.UI.WebControls.Panel,System.Collections.Generic.IEnumerable{RapidWebDev.UI.ISiteMapItem})">
            <summary>
            Create a control contains all elements in the frame page, e.g. header, navigation bar, working area and footer. 
            The method will be invoked by <see cref="T:RapidWebDev.UI.Services.FramePageHandler"/> in the event "OnInit".
            </summary>
            <param name="configurationSection">Frame page configuration section.</param>
            <param name="headerPanel">Page header panel.</param>
            <param name="footerPanel">Page footer panel.</param>
            <param name="siteMapItems">Sitemap items</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.SaaS.SaaSFramePageLayout.OnPreRender">
            <summary>
            The method will be invoked by <see cref="T:RapidWebDev.UI.Services.FramePageHandler"/> in the event "OnPreRender".
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.PermissionBridge">
            <summary>
            Permission bridge to connect platform authority infrastructure and UI permission facade.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.PermissionBridge.#ctor(RapidWebDev.Platform.IAuthenticationContext,RapidWebDev.Platform.IPermissionApi,RapidWebDev.Platform.ISiteMapApi)">
            <summary>
            Constructor
            </summary>
            <param name="authenticationContext"></param>
            <param name="permissionApi"></param>
            <param name="siteMapApi"></param>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataManagement">
            <summary>
            Hierarchy data management dynamic page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataManagement.authenticationContext">
            <summary>
            Protected authentication context.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataManagement.hierarchyApi">
            <summary>
            Protected hierarchy Api.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataManagement.Query(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Execute query for results binding to dynamic page grid.
            </summary>
            <param name="parameter">Query parameter.</param>
            <returns>Returns query results.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataManagement.Delete(System.String)">
            <summary>
            Delete hierarchy data by id.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataManagement.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.HierarchyDataManagement.CreateCustomQuery(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Create custom query expression which will be used with input query parameter to execute query by the method Query.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.LoginResults">
            <summary>
            Status of user login to system
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.LoginResults.InvalidCredential">
            <summary>
            Invalid user name or password
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.LoginResults.Successful">
            <summary>
            Successful
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.LoginResults.InvalidOrganization">
            <summary>
            Organization which the user belongs to is unavailable.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.LoginResults.LockedOut">
            <summary>
            The user is locked out by continuous failed password attempts.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.RoleApi">
            <summary>
            Role Api bases on integrating asp.net Role api.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.IRoleApi">
            <summary>
            The interface of role accessing
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.Save(RapidWebDev.Platform.RoleObject)">
            <summary>
            Save role business object. 
            It does create/update based on roleObject.Id. If id is empty, the method will create a new role object.
            If the specified id is invalid, the method will throw an exception.
            </summary>
            <param name="roleObject">role object</param>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.HardDelete(System.Guid)">
            <summary>
            Delete role
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.SetUserToRoles(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Set user into roles which overwrites all existed roles of user.
            </summary>
            <param name="userId"></param>
            <param name="roleIds"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.Get(System.String)">
            <summary>
            Get role id by role name.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.Get(System.Guid)">
            <summary>
            Get role id by role id.
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.BulkGet(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Bulkget role objects by a collection of role ids.
            </summary>
            <param name="roleIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.FindAll">
            <summary>
            Find all available roles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.FindByDomain(System.String)">
            <summary>
            Find roles by domain. returns all if specified argument is null.
            </summary>
            <param name="domain">organization domain</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.FindByUserId(System.Guid)">
            <summary>
            Find all roles of specified user.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.IsUserInRole(System.Guid,System.Guid)">
            <summary>
            Gets true if specified user is in role.
            </summary>
            <param name="userId"></param>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.IsUserInRole(System.Guid,System.String)">
            <summary>
            Gets true if specified user is in role.
            </summary>
            <param name="userId"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRoleApi.FindRoles(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find role objects by custom predicates.
            </summary>
            <param name="predicate">linq predicate. see role properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Role"/>.</param>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="recordCount">total hit records count</param>
            <returns>Returns enumerable role objects</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.#ctor(RapidWebDev.Platform.IAuthenticationContext)">
            <summary>
            Construct RoleApi by authenticationContext
            </summary>
            <param name="authenticationContext"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.Save(RapidWebDev.Platform.RoleObject)">
            <summary>
            Save role business object. 
            It does create/update based on roleObject.Id. If id is empty, the method will create a new role object.
            If the specified id is invalid, the method will throw an exception.
            </summary>
            <param name="roleObject">role object</param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">Role name existed in system</exception>
            <exception cref="T:System.ArgumentException">Role id is invalid</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.HardDelete(System.Guid)">
            <summary>
            Delete role
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.SetUserToRoles(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Set user into roles which overwrites all existed roles of user.
            </summary>
            <param name="userId"></param>
            <param name="roleIds"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.Get(System.String)">
            <summary>
            Get role id by role name.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.Get(System.Guid)">
            <summary>
            Get role id by role id.
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.BulkGet(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Bulkget role objects by a collection of role ids.
            </summary>
            <param name="roleIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.FindAll">
            <summary>
            Find all available roles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.FindByDomain(System.String)">
            <summary>
            Find roles by domain. returns all if specified argument is null.
            </summary>
            <param name="domain">organization domain</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.FindByUserId(System.Guid)">
            <summary>
            Find all roles of specified user.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.IsUserInRole(System.Guid,System.Guid)">
            <summary>
            Gets true if specified user is in role.
            </summary>
            <param name="userId"></param>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.IsUserInRole(System.Guid,System.String)">
            <summary>
            Gets true if specified user is in role.
            </summary>
            <param name="userId"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RoleApi.FindRoles(System.Linq.LinqPredicate,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find role objects by custom predicates.
            </summary>
            <param name="predicate">linq predicate. see role properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Role"/>.</param>
            <param name="orderby">dynamic orderby command</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="recordCount">total hit records count</param>
            <returns>Returns enumerable role objects</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.OrganizationService">
            <summary>
            The service implementation to search accessible organizations for current authenticated user.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.ListDomainsJson">
            <summary>
            Lists all available organization domains.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.ListDomainsXml">
            <summary>
            Lists all available organization domains.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.SaveOrganizationTypeJson(RapidWebDev.Platform.OrganizationTypeObject)">
            <summary>
            Save organization type object.
            </summary>
            <param name="organizationTypeObject"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.SaveOrganizationTypeXml(RapidWebDev.Platform.OrganizationTypeObject)">
            <summary>
            Save organization type object.
            </summary>
            <param name="organizationTypeObject"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationTypeByIdJson(System.String)">
            <summary>
            Get the organization type by id.
            </summary>
            <param name="organizationTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationTypeByIdXml(System.String)">
            <summary>
            Get the organization type by id.
            </summary>
            <param name="organizationTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationTypeByNameJson(System.String)">
            <summary>
            Get the organization type by name.
            </summary>
            <param name="organizationTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationTypeByNameXml(System.String)">
            <summary>
            Get the organization type by name.
            </summary>
            <param name="organizationTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.FindOrganizationTypesJson(System.String)">
            <summary>
            Find organization types in specified domain.
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.FindOrganizationTypesXml(System.String)">
            <summary>
            Find organization types in specified domain.
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.SearchJson(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Search organizations by a collection of criterias for the authenticated user of request.
            </summary>
            <param name="domain">Which domain of the searching organizations.</param>
            <param name="orgTypeId">Which organization type the searching organizations should belong to.</param>
            <param name="q">Keywords for searching.</param>
            <param name="sortDirection">Sorting field name, the default sorting field is LastUpdatedDate.</param>
            <param name="sortOrder">Sorting order, DESC or ASC, the default sorting order is DESC.</param>
            <param name="start">The start organization index of hit to return.</param>
            <param name="limit">The limit of returned organizations.</param>
            <returns>The query results object includes total hit count, returned records, start and limit.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.SearchXml(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Search organizations by a collection of criterias for the authenticated user of request.
            </summary>
            <param name="domain">Which domain of the searching organizations.</param>
            <param name="orgTypeId">Which organization type the searching organizations should belong to.</param>
            <param name="q">Keywords for searching.</param>
            <param name="sortField">Sorting field name, the default sorting field is LastUpdatedDate.</param>
            <param name="sortDirection">Sorting order, DESC or ASC, the default sorting order is DESC.</param>
            <param name="start">The start organization index of hit to return.</param>
            <param name="limit">The limit of returned organizations.</param>
            <returns>The query results object includes total hit count, returned records, start and limit.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationJson(System.String,System.String)">
            <summary>
            Get first organization matching the specified query. 
            The matching algorithm is to try to search organizations in following order. Once an organization is found, it's returned as the result.
            1) completely match organization code;
            2) completely match organization name;
            3) match whether there has organizations with code starts with specified query;
            4) match whether there has organizations with name starts with specified query;
            </summary>
            <param name="domain"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationXml(System.String,System.String)">
            <summary>
            Get first organization matching the specified query. 
            The matching algorithm is to try to search organizations in following order. Once an organization is found, it's returned as the result.
            1) completely match organization code;
            2) completely match organization name;
            3) match whether there has organizations with code starts with specified query;
            4) match whether there has organizations with name starts with specified query;
            </summary>
            <param name="domain"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.SaveOrganizationJson(RapidWebDev.Platform.OrganizationObject)">
            <summary>
            Save organization  object
            </summary>
            <param name="organizationObject"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.SaveOrganizationXml(RapidWebDev.Platform.OrganizationObject)">
            <summary>
            Save organization  object
            </summary>
            <param name="organizationObject"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationByIdJson(System.String)">
            <summary>
            Get the organization by id.      
            </summary>		
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationByIdXml(System.String)">
            <summary>
            Get the organization by id.      
            </summary>		
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationByCodeJson(System.String)">
            <summary>
            Get the organization by code.
            </summary>		
            <param name="organizationCode"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationByCodeXml(System.String)">
            <summary>
            Get the organization by code.
            </summary>		
            <param name="organizationCode"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationByNameJson(System.String)">
            <summary>
            Get the organization by name.
            </summary>		
            <param name="organizationName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.GetOrganizationByNameXml(System.String)">
            <summary>
            Get the organization by name.
            </summary>		
            <param name="organizationName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.BulkGetOrganizationsByIdsJson(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Find organizations by organization ids.    
            </summary>
            <param name="organizationIdList">organization ids</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.BulkGetOrganizationsByIdsXml(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Find organizations by organization ids.    
            </summary>
            <param name="organizationIdList">organization ids</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.QueryOrganizationsJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query organizations by custom predicates.
            </summary>
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>       
            <param name="predicate">linq predicate. see organization properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Organization"/>.</param>
            <returns>Returns organizations</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.OrganizationService.QueryOrganizationsXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query organizations by custom predicates.
            </summary>
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>       
            <param name="predicate">linq predicate. see organization properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Organization"/>.</param>
            <returns>Returns organizations</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.ApplicationInstaller">
            <summary>
            Application installer - automatically installing application for first accessing.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.ApplicationInstaller.#ctor(RapidWebDev.Platform.IApplicationApi)">
            <summary>
            Constructor
            </summary>
            <param name="applicationApi">Application API</param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.ApplicationInstaller.#ctor(RapidWebDev.Platform.IApplicationApi,RapidWebDev.Platform.ApplicationObject)">
            <summary>
            Initializes a new instance of the <see cref="T:RapidWebDev.Platform.Initialization.ApplicationInstaller"/> class.
            </summary>
            <param name="applicationApi">The application API.</param>
            <param name="applicationObjectTemplate">The application object template.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.ApplicationInstaller.Install(System.String)">
            <summary>
            Install application by name.
            Do nothing if the application have existed.
            </summary>
            <param name="applicationName">application name to install</param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.ApplicationInstaller.Uninstall(System.String)">
            <summary>
            Uninstall application
            </summary>
            <param name="applicationName">application name to uninstall</param>
        </member>
        <member name="T:RapidWebDev.Platform.XmlFilePermissionConfigurationReader">
            <summary>
            Api to read permission configuration.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.XmlFilePermissionConfigurationReader.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="permissionFilePath"></param>
        </member>
        <member name="M:RapidWebDev.Platform.XmlFilePermissionConfigurationReader.Read">
            <summary>
            Read permission configuration document.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowUserInRoles">
            <summary>
            Transform input user id to enumerable role names.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowUserInRoles.Format(System.String,System.Object)">
            <summary>
            Format input field value. 
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.UserObject">
            <summary>
             Information element of user object.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.UserObject.#ctor">
            <summary>
            Construct user business object.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.UserObject.#ctor(System.Web.Security.MembershipUser)">
            <summary>
            Construct user business object.
            </summary>
            <param name="membershipUser"></param>
        </member>
        <member name="M:RapidWebDev.Platform.UserObject.ToString">
            <summary>
            Returns display identifier of current user as "DisplayName".
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.UserObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.UserObject.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.UserObject.Clone">
            <summary>
            Get the copy of current object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.ApplicationId">
            <summary>
            Gets application id.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.UserId">
            <summary>
            Sets/gets user id.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.OrganizationId">
            <summary>
            Sets/gets the organization id which the user belongs to.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.UserName">
            <summary>
            Sets/gets the logon name of the membership user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.DisplayName">
            <summary>
            Sets/gets the display name of the membership user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.Email">
            <summary>
            Sets/gets or sets the e-mail address for the membership user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.PasswordQuestion">
            <summary>
            Sets/gets the password question for the membership user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.MobilePin">
            <summary>
            Sets/gets or sets the mobile pin for the membership user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.Comment">
            <summary>
            Sets/gets or sets application-specific information for the membership user.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.IsApproved">
            <summary>
            Sets/gets or sets whether the membership user can be authenticated.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.IsLockedOut">
            <summary>
            Gets a value indicating whether the membership user is locked out and unable to be validated.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.IsOnline">
            <summary>
            Gets whether the user is currently online.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.CreationDate">
            <summary>
            Gets the date and time when the user was added to the membership data store.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.LastActivityDate">
            <summary>
            Gets or sets the date and time when the membership user was last authenticated or accessed the application.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.LastLockoutDate">
            <summary>
            Gets the most recent date and time that the membership user was locked out.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.LastLoginDate">
            <summary>
            Gets or sets the date and time when the user was last authenticated.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.LastPasswordChangedDate">
            <summary>
            Gets the date and time when the membership user's password was last updated.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.UserObject.LastUpdatedDate">
            <summary>
            Gets user last updated datetime.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.Add">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.AnonymousUser">
            <summary>
              Looks up a localized string similar to Anonymous.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.CannotDeleteOrganizationTypeWithOrganizations">
            <summary>
              Looks up a localized string similar to The organization type {1} cannot be deleted due to {0} associated organizations..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.CodeCannotUpdate">
            <summary>
              Looks up a localized string similar to Code cannot be updated..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ConcreteDataNameCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Concrete data name cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ConcreteDataObjectCannotBeNull">
            <summary>
              Looks up a localized string similar to Concrete Data Object cannot be null!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.Delete">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DisplayNameCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Display name cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DuplicateConcreteDataName">
            <summary>
              Looks up a localized string similar to The name &quot;{0}&quot; of concrete data is duplicated..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DuplicateDisplayName">
            <summary>
              Looks up a localized string similar to Display name {0} has existed already!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DuplicateHierarchyDataName">
            <summary>
              Looks up a localized string similar to Duplicate hierarchy data name..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DuplicateHierarchyTypeName">
            <summary>
              Looks up a localized string similar to Duplicate hierarchy type name..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DuplicateOrganizationCode">
            <summary>
              Looks up a localized string similar to Organization code {0} has existed already!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DuplicateOrganizationName">
            <summary>
              Looks up a localized string similar to Organization name {0} has existed already!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DuplicateOrganizationTypeName">
            <summary>
              Looks up a localized string similar to Organization type name {0} has existed already!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DuplicateRoleName">
            <summary>
              Looks up a localized string similar to Role {0} has existed in application. There only allows unique role name across organization domains in an application..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.DuplicateUserName">
            <summary>
              Looks up a localized string similar to User name {0} has existed already!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.Edit">
            <summary>
              Looks up a localized string similar to Edit.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ExistedAreaCode">
            <summary>
              Looks up a localized string similar to Area code {0} has been existed..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ExistedAreaName">
            <summary>
              Looks up a localized string similar to Area name {0} has been existed..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ExistedDisplayName">
            <summary>
              Looks up a localized string similar to Display name has been existed..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ExistedOrganizationCode">
            <summary>
              Looks up a localized string similar to Organization code {0} has been existed..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ExistedOrganizationName">
            <summary>
              Looks up a localized string similar to Organization name {0} has been existed..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ExistedOrganizationTypeName">
            <summary>
              Looks up a localized string similar to The organization type {0} has been existed..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ExistedRoleName">
            <summary>
              Looks up a localized string similar to Role {0} has been existed..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ExistedUserEmail">
            <summary>
              Looks up a localized string similar to User email has been existed..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ExistedUserName">
            <summary>
              Looks up a localized string similar to User name has been exist..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.HasChildArea">
            <summary>
              Looks up a localized string similar to with children..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.HasNoChildArea">
            <summary>
              Looks up a localized string similar to without children.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.HierarchyDataNameCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Hierarchy name cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.HierarchyObjectCannotBeNull">
            <summary>
              Looks up a localized string similar to Hierarchy Data Object cannot be null!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.HierarchyTypeCannotBeChanged">
            <summary>
              Looks up a localized string similar to The hierarchy type of hierarchy data cannot be changed..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidApplicationID">
            <summary>
              Looks up a localized string similar to Invalid application ID {0}..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidAreaID">
            <summary>
              Looks up a localized string similar to Invalid area ID..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidAuthentication">
            <summary>
              Looks up a localized string similar to The authentication is invalid..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidConcreteDataID">
            <summary>
              Looks up a localized string similar to Invalid concrete data id. The concrete data may be deleted by other users before your operation..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidConcreteDataType">
            <summary>
              Looks up a localized string similar to The request query string parameter ConcreteDataType &quot;{0}&quot; is invalid..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidDisplayName">
            <summary>
              Looks up a localized string similar to Display name should not be empty or greater than 256 characters..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidDomain">
            <summary>
              Looks up a localized string similar to The request query string parameter Domain &quot;{0}&quot; is invalid..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidHierarchyAssociatedWithOrganization">
            <summary>
              Looks up a localized string similar to Invalid hierarchy &quot;{1}&quot; in type &quot;{0}&quot; associated with the organization..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidHierarchyDataId">
            <summary>
              Looks up a localized string similar to Invalid hierarchy data id..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidHierarchyDataName">
            <summary>
              Looks up a localized string similar to Invalid Hierarchy Data Name!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidHierarchyType">
            <summary>
              Looks up a localized string similar to Invalid hierarchy type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidOldPasswordWhenChangePassword">
            <summary>
              Looks up a localized string similar to The old password is invalid!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidOrganizationCredential">
            <summary>
              Looks up a localized string similar to The organization of the user is invalid..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidOrganizationDomain">
            <summary>
              Looks up a localized string similar to Invalid organization domain..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidOrganizationID">
            <summary>
              Looks up a localized string similar to Invalid organization ID..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidOrganizationTypeDomain">
            <summary>
              Looks up a localized string similar to Invalid domain {0} of organization type..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidOrganizationTypeID">
            <summary>
              Looks up a localized string similar to Organization type ID is invalid..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidParentAreaID">
            <summary>
              Looks up a localized string similar to Parent area ID is invalid..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidParentHierarchyDataId">
            <summary>
              Looks up a localized string similar to Invalid parent hierarchy data id..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidParentOrganizationID">
            <summary>
              Looks up a localized string similar to The specified parent organization is invalid..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidPasswordFormat">
            <summary>
              Looks up a localized string similar to Password is not allowed format..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidRoleID">
            <summary>
              Looks up a localized string similar to Invalid role ID..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidUserCredential">
            <summary>
              Looks up a localized string similar to The credential is invalid..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidUserEmail">
            <summary>
              Looks up a localized string similar to User email should not be greater than 256 characters..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidUserID">
            <summary>
              Looks up a localized string similar to user ID {0} is invalid..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.InvalidUserName">
            <summary>
              Looks up a localized string similar to User name should not be empty or greater than 256 characters..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.NoParentArea">
            <summary>
              Looks up a localized string similar to Has no parent.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.OrganizationCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Organization cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.OrganizationCodeCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Organization code cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.OrganizationNameCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Organization name cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.OrganizationProfile">
            <summary>
              Looks up a localized string similar to Organization Profile.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.OrganizationStatusCannotBeHigherThanParent">
            <summary>
              Looks up a localized string similar to The status of organization {2} cannot be set to {3} higher than {1} of its parent {0}..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.OrganizationStatusNotSpecified">
            <summary>
              Looks up a localized string similar to Organization status is not specified..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.OrganizationTypeCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Organization type cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.OrganizationTypeDomainCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Organization type domain cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.OrganizationTypeNameCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Organization type name cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ParentArea">
            <summary>
              Looks up a localized string similar to Parent: {0}.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.ParentOrganizationCircularReference">
            <summary>
              Looks up a localized string similar to The parent organization has circular reference as {0}..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordAnswerCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Password answer cannot be empty..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordAnswerInvalidLength">
            <summary>
              Looks up a localized string similar to Password answer should not be greater than 256 characters..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordAnswerTooLong">
            <summary>
              Looks up a localized string similar to Password answer is too long..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Password cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordFormatIsInvalid">
            <summary>
              Looks up a localized string similar to Password is invalid - not match the format {0}!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordInvalid">
            <summary>
              Looks up a localized string similar to Password should not be empty or greater than 128 characters..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordLengthLessThanRequired">
            <summary>
              Looks up a localized string similar to Password length cannot be less than {0} characters!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordLessThanMinLength">
            <summary>
              Looks up a localized string similar to Password length should not be less than {0} characters..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordLessThanMinRequiredNonAlphanumericCharacters">
            <summary>
              Looks up a localized string similar to Password contains less than {0} non alphanumeric characters..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordNotEqualToConfirmPassword">
            <summary>
              Looks up a localized string similar to Password is not equal to password confirm!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordQuestionCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Password question cannot be empty for user..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordQuestionInvalidLength">
            <summary>
              Looks up a localized string similar to Password question should not be greater than 256 characters..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.PasswordTooLong">
            <summary>
              Looks up a localized string similar to Password is too long..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.RoleNameCannotBeEmpty">
            <summary>
              Looks up a localized string similar to Role name cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.UnauthorizedAccess">
            <summary>
              Looks up a localized string similar to The request is not authorized..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.UserEmailCannotBeEmpty">
            <summary>
              Looks up a localized string similar to User email cannot be empty..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.UserEmailCannotBeGreaterThan256Characters">
            <summary>
              Looks up a localized string similar to User email should not be greater than 256 characters..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.UserHasBeenLockedOut">
            <summary>
              Looks up a localized string similar to The user is locked out by too many failed password attempts..
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.UserNameCannotBeEmpty">
            <summary>
              Looks up a localized string similar to User name cannot be empty!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.UserObjectCannotBeNull">
            <summary>
              Looks up a localized string similar to User Object cannot be null!.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Properties.Resources.UserProfile">
            <summary>
              Looks up a localized string similar to User Profile.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.RwdSqlRoleProvider">
            <summary>
            Manages storage of membership information which extends SqlMembershipProvider to support SAAS infrastructure.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.RwdSqlRoleProvider.ApplicationName">
            <summary>
            Gets or sets the name of the application to store and retrieve membership information for.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.SiteMapConfig">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapConfig.Domain">
            <remarks/>
        </member>
        <member name="T:RapidWebDev.Platform.SiteMapDomain">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapDomain.Item">
            <remarks/>
        </member>
        <member name="P:RapidWebDev.Platform.SiteMapDomain.Value">
            <remarks/>
        </member>
        <member name="T:RapidWebDev.Platform.SiteMapItemTypes">
            <remarks/>
        </member>
        <member name="F:RapidWebDev.Platform.SiteMapItemTypes.Item">
            <remarks/>
        </member>
        <member name="F:RapidWebDev.Platform.SiteMapItemTypes.Separator">
            <remarks/>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.PermissionApi">
            <summary>
            The implementation class of IPermissionApi interface
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.PermissionApi.#ctor(RapidWebDev.Platform.IAuthenticationContext,RapidWebDev.Platform.IMembershipApi,RapidWebDev.Platform.IRoleApi,RapidWebDev.Platform.IOrganizationApi,RapidWebDev.Platform.Initialization.IPlatformConfiguration,RapidWebDev.Platform.IPermissionConfigurationReader)">
            <summary>
            Construct PermissionApi instance
            </summary>
            <param name="authenticationContext"></param>
            <param name="membershipApi"></param>
            <param name="roleApi"></param>
            <param name="organizationApi"></param>
            <param name="platformConfiguration"></param>
            <param name="permissionConfigurationReader"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.PermissionApi.SetRolePermissions(System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set permissions on specified role.
            </summary>
            <param name="roleId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.PermissionApi.SetUserPermissions(System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set permissions on specified user.
            </summary>
            <param name="userId"></param>
            <param name="permissions"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.PermissionApi.FindUserPermissions(System.Guid,System.Boolean)">
            <summary>
            Get user owned permissions.
            </summary>
            <param name="userId">specified user</param>
            <param name="explicitOnly">true indicates that returns the permissions only directly set on the user</param>
            <returns>returns user permissions</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.PermissionApi.FindRolePermissions(System.Guid)">
            <summary>
            Get role permissions.
            </summary>
            <param name="roleId">specified role</param>
            <returns>returns role permissions</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.PermissionApi.HasPermission(System.Guid,System.String)">
            <summary>
            Returns true if specified user owns permission.
            </summary>
            <param name="userId">Specified user id</param>
            <param name="permissionValue">permission value</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.PermissionApi.HasPermission(System.String)">
            <summary>
            Returns true if the current authenticated user has any permissions in specified permission.
            </summary>
            <param name="permissionValue">permission value</param>
            <returns>Returns true if the current user has permission to access permission key.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.PermissionApi.FindPermissionConfig(System.Guid)">
            <summary>
            Returns all permission configurations owned by specified user.
            </summary>
            <param name="operateUserId">operate user id</param>
            <returns>Returns all permission configurations owned by specified user.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.PermissionApi.FilterPermissionConfigByUserPermission(System.Collections.Generic.IEnumerable{RapidWebDev.Platform.PermissionConfig},System.Collections.Generic.IEnumerable{RapidWebDev.Platform.PermissionObject})">
            <summary>
            Filter all permission configs not included in specified user permissions.
            </summary>
            <param name="permissionConfigEnumerable"></param>
            <param name="userPermissions"></param>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.Linq.PermissionApi.AllPermissionConfigs">
            <summary>
            Gets all permission configurations existed in system.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowOrganizationTypesByIds">
            <summary>
            The callback to show organization types by enumerable organization type ids.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.GridViewFieldValueTransformCallback.ShowOrganizationTypesByIds.Format(System.String,System.Object)">
            <summary>
            Format input field value. 
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.OrganizationObject">
            <summary>
            Organization business object.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.OrganizationObject.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.OrganizationObject.ToString">
            <summary>
            Returns current organization as a string for displaying as "[organization name]".
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.OrganizationObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.OrganizationObject.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.OrganizationObject.Clone">
            <summary>
            Get the copy of current object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.OrganizationId">
            <summary>
            Gets/sets organization id.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.OrganizationName">
            <summary>
            Gets/sets organization name.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.OrganizationCode">
            <summary>
            Gets/sets organization code.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.OrganizationTypeId">
            <summary>
            Gets/sets organization type id.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.Description">
            <summary>
            Gets/sets organization description.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.Hierarchies">
            <summary>
            The hierarchies which the organization associated with.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.Status">
            <summary>
            Gets/sets organization status.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.CreatedBy">
            <summary>
            Gets/sets id of user who created the organization.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.CreatedDate">
            <summary>
            Gets/sets organization created date.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.LastUpdatedBy">
            <summary>
            Gets/sets id of user who updated the organization at last.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.LastUpdatedDate">
            <summary>
            Gets/sets organization last updated date.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.OrganizationObject.ParentOrganizationId">
            <summary>
            Gets/sets parent organization id.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.MembershipService">
            <summary>
            external service implementation
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.IMembershipService">
            <summary>
            external services for populate the membership object
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.SaveJson(RapidWebDev.Platform.UserObject)">
            <summary>
            Add/update user object depends on whether identity of object is empty or not.<br />
            Uri Template: json/Save
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.SaveXml(RapidWebDev.Platform.UserObject)">
            <summary>
            Add/update user object depends on whether identity of object is empty or not.<br />
            Uri Template: xml/Save
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.BulkGetJson(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Resolve user objects from enumerable user ids.
            UriTemplate="json/BulkGet"
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.BulkGetXml(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Resolve user objects from enumerable user ids.
            UriTemplate="xml/BulkGet"
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.GetByNameJson(System.String)">
            <summary>
            Get user by user name.
            UriTemplate = "json/GetByName/{userName}"
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.GetByNameXml(System.String)">
            <summary>
            Get user by user name.
            UriTemplate = "xml/GetByName/{userName}"
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.GetByIdJson(System.String)">
            <summary>
            Get user object by user id.
            UriTemplate = "json/GetById/{userId}
            </summary>        
            <param name="userId">user id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.GetByIdXml(System.String)">
            <summary>
            Get user object by user id.
            UriTemplate = "xml/GetById/{userId}
            </summary>        
            <param name="userId">user id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.ChangePasswordJson(System.String)">
            <summary>
            Change password of specified user. 
            UriTemplate = "json/ChangePassword/{userId}"
            </summary>
            <param name="userId"></param>
            <returns>returns true if operation successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.ChangePasswordXml(System.String)">
            <summary>
            Change password of specified user. 
            UriTemplate = "xml/ChangePassword/{userId}"
            </summary>
            <param name="userId"></param>
            <returns>returns true if operation successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.QueryUsersJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find user business objects by custom predicates.
            UriTemplate = "json/QueryUsers?pageindex={pageIndex}&amp;pagesize={pageSize}&amp;orderby={orderby}"
            </summary>        
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>       
            <param name="predicate">linq predicate. see user properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.User"/>.</param>
            <returns>Returns enumerable user objects</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IMembershipService.QueryUsersXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find user business objects by custom predicates.
            UriTemplate = "xml/QueryUsers?pageindex={pageIndex}&amp;pagesize={pageSize}&amp;orderby={orderby}"
            </summary>        
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>       
            <param name="predicate">linq predicate. see user properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.User"/>.</param>
            <returns>Returns enumerable user objects</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.SaveJson(RapidWebDev.Platform.UserObject)">
            <summary>
            Add/update user object depends on whether identity of object is empty or not.<br />      
            </summary>
            <param name="user"></param>   
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.BulkGetJson(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Resolve user objects from enumerable user ids.
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.GetByNameJson(System.String)">
            <summary>
            Get user by user name.  
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.GetByIdJson(System.String)">
            <summary>
            Get user object by user id.
            </summary>   
            <param name="userId">user id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.ChangePasswordJson(System.String)">
            <summary>
            Change password of specified user. 
            </summary>      
            <param name="userId"></param>
            <returns>returns true if operation successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.QueryUsersJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find user business objects by custom predicates.
            </summary>            
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>        
            <param name="predicate">linq predicate. see user properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.User"/>.</param>
            <returns>Returns enumerable user objects</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.SaveXml(RapidWebDev.Platform.UserObject)">
            <summary>
            Add/update user object depends on whether identity of object is empty or not.<br />      
            </summary>
            <param name="user"></param>   
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.BulkGetXml(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Resolve user objects from enumerable user ids.
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.GetByNameXml(System.String)">
            <summary>
            Get user by user name.  
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.GetByIdXml(System.String)">
            <summary>
            Get user object by user id.
            </summary>   
            <param name="userId">user id</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.ChangePasswordXml(System.String)">
            <summary>
            Change password of specified user. 
            </summary>      
            <param name="userId"></param>
            <returns>returns true if operation successfully.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.MembershipService.QueryUsersXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Find user business objects by custom predicates.
            </summary>           
            <param name="orderby">sorting field and direction</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>         
            <param name="predicate">linq predicate. see user properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.User"/>.</param>
            <returns>Returns enumerable user objects</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.IApplicationService">
            <summary>
            external service for populate Application Object
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IApplicationService.SaveJson(RapidWebDev.Platform.ApplicationObject)">
            <summary>
            Save application. Empty application id of application object means that the specified application object is new created. 
            And after it's inserted into database, the database generated id will be set back to property id.
            Non-empty application id means to update an existed application. 
            If the non-empty application id is not available in database, it throws exception ValidationException.
            </summary>
            <param name="applicationObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">If the non-empty application id is not available in database, it throws exception ValidationException.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IApplicationService.GetJson(System.String)">
            <summary>
            Get application biz object by id. Returns null if the application id is invalid.
            </summary>
            <param name="applicationId"></param>
            <returns>returns null if the application id is invalid.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IApplicationService.GetByNameJson(System.String)">
            <summary>
            Get application biz object by name with ignoring character case. Returns null if the application id is invalid.
            </summary>
            <param name="applicationName"></param>
            <returns>Returns null if the application name is invalid.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.IApplicationService.ExistsJson(System.String)">
            <summary>
            Returns true if specified application name exists with ignoring character case.
            </summary>
            <param name="applicationName"></param>
            <returns>Returns true if specified application name exists.</returns>
        </member>
        <member name="T:RapidWebDev.Platform.Linq.RelationshipApi">
            <summary>
            The implementation to manage relationship between 2 entities using linq-to-sql.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.IRelationshipApi">
            <summary>
            The interface to manage relationship between 2 entities.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.Save(System.Guid,System.Guid,System.String)">
            <summary>
            Save relationship b/w 2 entities on special relationship type.
            </summary>
            <param name="objectId"></param>
            <param name="relatedObjectId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.Save(System.Guid,RapidWebDev.Platform.RelationshipObject)">
            <summary>
            Save relationship b/w 2 entities on special relationship type.
            </summary>
            <param name="objectId"></param>
            <param name="relationship"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.Save(System.Guid,System.Collections.Generic.IEnumerable{RapidWebDev.Platform.RelationshipObject})">
            <summary>
            Save a collection of objects related to an object.
            </summary>
            <param name="objectId"></param>
            <param name="relationships"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.Remove(System.Guid)">
            <summary>
            Remove any relationships with specified object.
            </summary>
            <param name="objectId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.Remove(System.Guid,System.String)">
            <summary>
            Remove any relationships with specified object in specified relationship type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.Remove(System.Guid,System.Guid)">
            <summary>
            Remove any relationship b/w X and Y in any relationship types.
            </summary>
            <param name="objectXId"></param>
            <param name="objectYId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.Remove(System.Guid,System.Guid,System.String)">
            <summary>
            Remove the relationship b/w X and Y in the special relationship type.
            </summary>
            <param name="objectXId"></param>
            <param name="objectYId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.GetOneToOne(System.Guid,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.GetManyToOne(System.Guid,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.GetOneToMany(System.Guid,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.IRelationshipApi.FindAllRelationship(System.Guid)">
            <summary>
            Find all objects related to the target object in any special relationship type.
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.#ctor(RapidWebDev.Platform.IAuthenticationContext)">
            <summary>
            Construct RelationshipApi
            </summary>
            <param name="authenticationContext"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.Save(System.Guid,System.Guid,System.String)">
            <summary>
            Save relationship b/w 2 entities on special relationship type.
            </summary>
            <param name="objectId"></param>
            <param name="relatedObjectId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.Save(System.Guid,RapidWebDev.Platform.RelationshipObject)">
            <summary>
            Save relationship b/w 2 entities on special relationship type.
            </summary>
            <param name="objectId"></param>
            <param name="relationship"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.Save(System.Guid,System.Collections.Generic.IEnumerable{RapidWebDev.Platform.RelationshipObject})">
            <summary>
            Save a collection of objects related to an object.
            </summary>
            <param name="objectId"></param>
            <param name="relationships"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.Remove(System.Guid)">
            <summary>
            Remove any relationships with specified object.
            </summary>
            <param name="objectId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.Remove(System.Guid,System.String)">
            <summary>
            Remove any relationships with specified object in specified relationship type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.Remove(System.Guid,System.Guid)">
            <summary>
            Remove any relationship b/w X and Y in any relationship types.
            </summary>
            <param name="objectXId"></param>
            <param name="objectYId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.Remove(System.Guid,System.Guid,System.String)">
            <summary>
            Remove the relationship b/w X and Y in the special relationship type.
            </summary>
            <param name="objectXId"></param>
            <param name="objectYId"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.GetOneToOne(System.Guid,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.GetManyToOne(System.Guid,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.GetOneToMany(System.Guid,System.String)">
            <summary>
            Get the object related to the target object in special type.
            </summary>
            <param name="objectId"></param>
            <param name="relationshipType"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Linq.RelationshipApi.FindAllRelationship(System.Guid)">
            <summary>
            Find all objects related to the target object in any special relationship type.
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.InstallerManager">
            <summary>
            The implementation class of IInstallerManager manages all installer instances.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.InstallerManager.Install(System.String)">
            <summary>
            Install application
            </summary>
            <param name="applicationName">application name to install</param>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.InstallerManager.Uninstall(System.String)">
            <summary>
            Uninstall application
            </summary>
            <param name="applicationName">application name to uninstall</param>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.InstallerManager.Installers">
            <summary>
            Gets/sets enumerable installers.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.ConcreteDataQueryResult">
            <summary>
            Concrete data query result
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataQueryResult.#ctor(System.Collections.Generic.IList{RapidWebDev.Platform.ConcreteDataObject})">
            <summary>
            Constructor
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ConcreteDataQueryResult.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.ConcreteDataQueryResult.PageIndex">
            <summary>
            Page index which starts from 0.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.ConcreteDataQueryResult.PageSize">
            <summary>
            Page size.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.ConcreteDataQueryResult.TotalRecordCount">
            <summary>
            Total record count.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Initialization.OrganizationDomain">
            <summary>
            The platform supported organization domain configuration.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.OrganizationDomain.ToString">
            <summary>
            Returns organization domain Value instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.OrganizationDomain.Equals(System.Object)">
            <summary>
            Determines whether the specified OrganizationDomain is equal to the current OrganizationDomain.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Initialization.OrganizationDomain.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.OrganizationDomain.Value">
            <summary>
            Sets/gets domain unique value
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Initialization.OrganizationDomain.Text">
            <summary>
            Sets/gets domain display text.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.AnonymousIdentity">
            <summary>
            Anonymous Identity implements IIdentity interface.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.AnonymousIdentity.#ctor(System.String)">
            <summary>
            Construct AnonymousIdentity by user name
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:RapidWebDev.Platform.AnonymousIdentity.#ctor(System.String,System.String)">
            <summary>
            Construct AnonymousIdentity by user name and authentication type.
            </summary>
            <param name="userName"></param>
            <param name="authenticationType"></param>
        </member>
        <member name="P:RapidWebDev.Platform.AnonymousIdentity.AuthenticationType">
            <summary>
            Gets authentication type
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.AnonymousIdentity.IsAuthenticated">
            <summary>
            Gets false always since this is anonymous identity.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.AnonymousIdentity.Name">
            <summary>
            Gets the authenticated user name.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.OrganizationManagement">
            <summary>
            Class to management organizations.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationManagement.authenticationContext">
            <summary>
            Protected authentication context.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationManagement.organizationApi">
            <summary>
            Protected organization Api.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.OrganizationManagement.permissionApi">
            <summary>
            Protected permission Api.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationManagement.Query(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Execute query for organizations binding to dynamic page grid.
            </summary>
            <param name="parameter">Query parameter.</param>
            <returns>Returns query results.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationManagement.Delete(System.String)">
            <summary>
            Delete specified organization by id.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationManagement.OnGridRowControlsBind(RapidWebDev.UI.DynamicPages.GridRowControlBindEventArgs)">
            <summary>
            Disabled organizations cannot be edited and deleted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationManagement.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.OrganizationManagement.CreateCustomQuery(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Create custom query expression which will be used with input query parameter to execute query by the method Query.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Services.UserQueryResult">
            <summary>
            Use Data query result
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.UserQueryResult.#ctor(System.Collections.Generic.IList{RapidWebDev.Platform.UserObject})">
            <summary>
            Constructor
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.UserQueryResult.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.UserQueryResult.PageIndex">
            <summary>
            Page index which starts from 0.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.UserQueryResult.PageSize">
            <summary>
            Page size.
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.Services.UserQueryResult.TotalRecordCount">
            <summary>
            Total record count.
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Services.ApplicationService">
            <summary>
            external service for populate Application Object
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ApplicationService.SaveJson(RapidWebDev.Platform.ApplicationObject)">
            <summary>
            Save application. Empty application id of application object means that the specified application object is new created. 
            And after it's inserted into database, the database generated id will be set back to property id.
            Non-empty application id means to update an existed application. 
            If the non-empty application id is not available in database, it throws exception ValidationException.
            </summary>
            <param name="applicationObject"></param>
            <exception cref="T:RapidWebDev.Common.Validation.ValidationException">If the non-empty application id is not available in database, it throws exception ValidationException.</exception>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ApplicationService.GetJson(System.String)">
            <summary>
            Get application biz object by id. Returns null if the application id is invalid.
            </summary>
            <param name="applicationId"></param>
            <returns>returns null if the application id is invalid.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ApplicationService.GetByNameJson(System.String)">
            <summary>
            Get application biz object by name with ignoring character case. Returns null if the application id is invalid.
            </summary>
            <param name="applicationName"></param>
            <returns>Returns null if the application name is invalid.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ApplicationService.ExistsJson(System.String)">
            <summary>
            Returns true if specified application name exists with ignoring character case.
            </summary>
            <param name="applicationName"></param>
            <returns>Returns true if specified application name exists.</returns>
        </member>
        <member name="T:RapidWebDev.Platform.ConcreteDataObject">
            <summary>
            Concrete data business object
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.ConcreteDataObject.ToString">
            <summary>
            Returns the value of property "Name".
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.ConcreteDataObject.Clone">
            <summary>
            Get the copy of current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.ConcreteDataObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.ConcreteDataObject.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.ConcreteDataId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.CreatedBy">
            <summary>
            Created by
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.LastUpdatedBy">
            <summary>
            Last updated by
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.LastUpdatedDate">
            <summary>
            Last updated date
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ConcreteDataObject.DeleteStatus">
            <summary>
            Delete status
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.RoleManagement">
            <summary>
            Role management dynamic page handler.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.RoleManagement.Query(RapidWebDev.UI.DynamicPages.QueryParameter)">
            <summary>
            Execute query for results binding to dynamic page grid.
            </summary>
            <param name="parameter">Query parameter.</param>
            <returns>Returns query results.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.RoleManagement.Delete(System.String)">
            <summary>
            Delete role by id.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.RoleManagement.OnGridRowControlsBind(RapidWebDev.UI.DynamicPages.GridRowControlBindEventArgs)">
            <summary>
            Predefined roles cannot be edited and deleted.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.RoleManagement.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="T:RapidWebDev.Platform.Services.RoleService">
            <summary>
            The service implementation to search roles
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.SaveJson(RapidWebDev.Platform.RoleObject)">
            <summary>
            Save role business object. 
            It does create/update based on roleObject.Id. If id is empty, the method will create a new role object.
            If the specified id is invalid, the method will throw an exception.       
            </summary>
            <param name="roleObject">role object</param>
            <returns>returns id of the accessing role.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.SaveXml(RapidWebDev.Platform.RoleObject)">
            <summary>
            Save role business object. 
            It does create/update based on roleObject.Id. If id is empty, the method will create a new role object.
            If the specified id is invalid, the method will throw an exception.
            </summary>
            <param name="roleObject">role object</param>
            <returns>returns id of the accessing role.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.HardDeleteJson(System.String)">
            <summary>
            Delete role by id.   
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.HardDeleteXml(System.String)">
            <summary>
            Delete role by id.        
            </summary>
            <param name="roleId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.SetUserToRolesJson(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set user into roles which overwrites all existed roles of user.    
            </summary>
            <param name="userId"></param>
            <param name="roleIds"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.SetUserToRolesXml(System.String,RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Set user into roles which overwrites all existed roles of user.       
            </summary>
            <param name="userId"></param>
            <param name="roleIds"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.GetByNameJson(System.String)">
            <summary>
            Get role by role name.
            </summary>
            <param name="roleName"></param>
            <returns></returns>        
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.GetByNameXml(System.String)">
            <summary>
            Get role by role name.      
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.GetByIdJson(System.String)">
            <summary>
            Get role by role id.        
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.GetByIdXml(System.String)">
            <summary>
            Get role by role id.        
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.BulkGetJson(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Bulkget role objects by a collection of role ids.        
            </summary>
            <param name="roleIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.BulkGetXml(RapidWebDev.Platform.Services.IdCollection)">
            <summary>
            Bulkget role objects by a collection of role ids.        
            </summary>
            <param name="roleIds"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindAllJson">
            <summary>
            Find all available roles.       
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindAllXml">
            <summary>
            Find all available roles.       
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindByUserIdJson(System.String)">
            <summary>   
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindByUserIdXml(System.String)">
            <summary>
            Get all roles associated to the specified organization.        
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindByOrganizationIdJson(System.String)">
            <summary>
            Get all roles associated to the specified organization.
            Uri Template: json/FindByOrganizationId/{organizationId}
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindByOrganizationIdXml(System.String)">
            <summary>
            Find all available roles.      
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindByOrganizationTypeJson(System.String)">
            <summary>
            Get all roles associated to the specified organization.     
            </summary>
            <param name="organizationTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindByOrganizationTypeXml(System.String)">
            <summary>
            Get all roles associated to the specified organization.      
            </summary>
            <param name="organizationTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindByDomainJson(System.String)">
            <summary>
            Find roles by domain
            </summary>
            <param name="domain">domain</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.FindByDomainXml(System.String)">
            <summary>
            Find roles by domain
            </summary>
            <param name="domain">domain</param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.IsUserInRoleByIdJson(System.String,System.String)">
            <summary>
            Gets true if specified user is in role.       
            </summary>
            <param name="userId"></param>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.IsUserInRoleByIdXml(System.String,System.String)">
            <summary>
            Gets true if specified user is in role.
            </summary>
            <param name="userId"></param>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.IsUserInRoleByNameJson(System.String,System.String)">
            <summary>
            Gets true if specified user is in role.
            Uri Template: json/IsUserInRoleByName/{userId}/{roleName}
            </summary>
            <param name="userId"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.IsUserInRoleByNameXml(System.String,System.String)">
            <summary>
            Gets true if specified user is in role.    
            </summary>
            <param name="userId"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.QueryRolesJson(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query role objects by custom predicates.
            </summary>
            <param name="orderby">sorting expression</param>
            <param name="pageIndex">current paging index</param>
            <param name="pageSize">page size</param>
            <param name="predicate">linq predicate. see role properties for predicate at <see cref="T:RapidWebDev.Platform.Linq.Role"/>.</param>
            <returns>Returns enumerable role objects</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.RoleService.QueryRolesXml(System.String,System.Int32,System.Int32,RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Query role objects by custom predicates.
            </summary>
            <param name="orderby"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.ApplicationObject">
            <summary>
            Business object for application
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.ApplicationObject.Clone">
            <summary>
            Get the copy of current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.ApplicationObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.ApplicationObject.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:RapidWebDev.Platform.ApplicationObject.Id">
            <summary>
            Application identifier
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ApplicationObject.Name">
            <summary>
            Application name
            </summary>
        </member>
        <member name="P:RapidWebDev.Platform.ApplicationObject.Description">
            <summary>
            Application description
            </summary>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.SetupContextTempVariablesUtility">
            <summary>
            Utility to setup dynamic page temporary variables.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.SetupContextTempVariablesUtility.SetupOrganizationDomain(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Get domain from query string of current http request and save "Domain.Text" and "Domain.Value" into TempVariables of IApplicationContext.
            It redirects the request to PageNotFound Url if query string "domain" is invalid.
            </summary>
            <param name="requestHandler">Request handler.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.SetupContextTempVariablesUtility.SetupOrganizationDomain(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs,System.Boolean)">
            <summary>
            Get domain from query string of current http request and save "Domain.Text" and "Domain.Value" into TempVariables of IApplicationContext.
            </summary>
            <param name="requestHandler">Request handler.</param>
            <param name="e">Callback event argument.</param>
            <param name="rediectToPageNotFoundUrlIfDomainNotFound">Whether to redirect the request to PageNotFound Url if query string "domain" is invalid</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.SetupContextTempVariablesUtility.SetupConcreteDataType(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs,System.Boolean)">
            <summary>
            Get concrete data type from query string of current http request and save "ConcreteDataCategory" into TempVariables of IApplicationContext.
            </summary>
            <param name="requestHandler">Request handler.</param>
            <param name="e"></param>
            <param name="rediectToPageNotFoundUrlIfCategoryNotFound"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.SetupContextTempVariablesUtility.SetupHierarchyType(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs,System.Boolean)">
            <summary>
            Get hierarchy type from query string of current http request and save "HierarchyType" into TempVariables of IApplicationContext.
            </summary>
            <param name="requestHandler">Request handler.</param>
            <param name="e"></param>
            <param name="rediectToPageNotFoundUrlIfHierarchyTypeNotFound"></param>
        </member>
        <member name="T:RapidWebDev.Platform.Services.ServicesHelper">
            <summary>
            Provide the flexible methods
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ServicesHelper.ConvertWebPredicateToLinqPredicate(RapidWebDev.Common.WebServiceQueryPredicate)">
            <summary>
            Convert Web query predicate to LinqPredicate
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ServicesHelper.ConvertStringCollectionToGuidCollection(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Services.ServicesHelper.ConvertStringCollectionToGuidEnumerable(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel">
            <summary>
            Concrete data detail panel page handler.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.authenticationContext">
            <summary>
            Protected authentication context.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.concreteDataApi">
            <summary>
            Protected concrete data Api.
            </summary>
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.TextBoxName">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.TextBoxValue">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.RadioButtonListStatus">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.TextBoxDescription">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.ExtensionDataForm">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.PlaceHolderOperatorContext">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.UserLinkCreatedBy">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.TextBoxCreatedDate">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.UserLinkLastUpdatedBy">
            <summary />
        </member>
        <member name="F:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.TextBoxLastUpdatedDate">
            <summary />
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.Create">
            <summary>
            Create a new concrete data from detail panel and return its id.
            The method needs to create a new entity and set control values to its properties then persist it.
            </summary>
            <returns>returns the id of new created concrete data.</returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.Update(System.String)">
            <summary>
            Update an existed concrete data from detail panel.
            The method needs to load an existed entity by specified id and set control values to overwrite its original properties then persist it.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.Reset">
            <summary>
            Reset all controls of the detail panel to initial state.
            The method will be invoked when enables the detail panel to support creating entities continuously.
            After an entity been created, the method will be invoked to reset form controls for another input.
            </summary>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.LoadWritableEntity(System.String)">
            <summary>
            The method is designed to load entity by id to editable detail panel controls.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.OnLoad(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.DetailPanelPageEventArgs)">
            <summary>
            The method will be invoked when detail panel is loaded.
            The implementation can resolve current visiting Page from the conversation as (HttpContext.Current.Handler as Page).
            </summary>
            <param name="sender">The web page which contains the detail panel.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.SetupContextTempVariables(RapidWebDev.UI.DynamicPages.IRequestHandler,RapidWebDev.UI.DynamicPages.SetupApplicationContextVariablesEventArgs)">
            <summary>
            Setup context temporary variables for formatting configured text-typed properties.
            Set domain into http context when web page is initializing.
            </summary>
            <param name="sender">The sender which invokes the method.</param>
            <param name="e">Callback event argument.</param>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.ResolveExtensionDataTypeId">
            <summary>
            Resolve extension data type id. Returns Guid.Empty by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RapidWebDev.Platform.Web.DynamicPage.ConcreteDataDetailPanel.ValidateInput(System.Guid)">
            <summary>
            Validate data input
            </summary>
            <param name="concreteDataObjectId"></param>
        </member>
    </members>
</doc>
